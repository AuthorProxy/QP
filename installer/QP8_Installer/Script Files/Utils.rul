prototype CreateWebsite(STRING, STRING, STRING, STRING);
prototype IsIIS7();
prototype IsIIS75();
prototype IsIIS8();
prototype IsNetfx45Installed();
prototype IsAppFabricInstalled();
prototype InstallService(STRING, STRING, STRING);
prototype UninstallService(STRING);
prototype GetDatabases(STRING);
prototype CheckDatabases(LIST, BYREF STRING);
prototype AddBinding(STRING, STRING, STRING, STRING);
prototype StopService(STRING);
prototype StartService(STRING);
prototype IsServiceInstalled(STRING);
prototype QPExecuteXML(STRING, STRING);
prototype QPCheckFingerprint(STRING, STRING);
prototype UpdateFrontendWebConfig(STRING);
prototype CreateAppPool(STRING);

function InstallService(szServiceName, szDisplayName, szFileName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "ServiceTools.ServiceInstaller", "");
	utilsObj.InstallAndStart(szServiceName, szDisplayName, szFileName);
end;

function UninstallService(szServiceName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "ServiceTools.ServiceInstaller", "");
	utilsObj.Uninstall(szServiceName);
end;

function StopService(szServiceName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "ServiceTools.ServiceInstaller", "");
	utilsObj.StopService(szServiceName);
end;

function StartService(szServiceName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "ServiceTools.ServiceInstaller", "");
	utilsObj.StartService(szServiceName);
end;

// CreateAppPool
//
// - Create new app pool
function CreateAppPool(szAppPoolName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	utilsObj.CreateAppPool(szAppPoolName, "v4.0");
end;

// CreateWebsite
//
// - Create new website
function CreateWebsite(szAppPoolName, szWebsiteName, szWebsitePort, szPhysicalPath)
	OBJECT utilsObj;
	NUMBER nWebsitePort;
	STRING tmp;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	StrToNum(nWebsitePort, szWebsitePort);
	utilsObj.CreateSite(szAppPoolName, szWebsiteName, nWebsitePort, szPhysicalPath);
end;

// AddBinding
//
// - Add binding
function AddBinding(szWebsiteName, szHostName, szPort, szIP)
	OBJECT utilsObj;
	NUMBER nWebsitePort;
	STRING tmp;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	utilsObj.AddBinding(szWebsiteName, szHostName, szPort, szIP);
end;

// IsIIS7
//
// - Check whether IIS 7 installed
function IsIIS7()
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"Campari.Software.Core.dll", "Utils.IISUtils", "");
	return utilsObj.IsIIS7();
end;

// IsIIS75
//
// - Check whether IIS 7.5 installed
function IsIIS75()
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"Campari.Software.Core.dll", "Utils.IISUtils", "");
	return utilsObj.IsIIS75();
end;

// IsIIS8
//
// - Check whether IIS 8 installed
function IsIIS8()
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"Campari.Software.Core.dll", "Utils.IISUtils", "");
	return utilsObj.IsIIS8();
end;

// IsNetfx45Installed
//
// - Is NETFX45 Installed?
function IsNetfx45Installed()
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"Campari.Software.Core.dll", "Utils.IISUtils", "");
	return utilsObj.IsNetfx45Installed();
end;

// IsAppFabricInstalled
//
// - Is AppFabric Installed?
function IsAppFabricInstalled()
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"Campari.Software.Core.dll", "Utils.IISUtils", "");
	return utilsObj.IsAppFabricInstalled();
end;

// IsServiceInstalled
//
// - Is Service Installed?
function IsServiceInstalled(szServiceName)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "ServiceTools.ServiceInstaller", "");
	return utilsObj.ServiceIsInstalled(szServiceName);
end;

/*function GetDatabases(szServerName)
	OBJECT utilsObj;
	STRING dbs;
	LIST listDB;
begin
	listDB = ListCreate(STRINGLIST); 
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	dbs = utilsObj.GetDatabases(szServerName);
	
	if (dbs != "")
	then
		StrGetTokens(listDB, dbs, "|");
	endif;

	return listDB;
end;

function CheckDatabases(listDBs, szDatabaseAbsent)
	BOOL bOk;
	STRING szTmp;
begin
	bOk = TRUE;
	ListGetFirstString(listDBs, szTmp);
	if(ListFindString(listDBs, "beeline_CRMCallback") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_CRMCallback";
	endif;

	if(ListFindString(listDBs, "beeline_geoMDMS") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_geoMDMS";
	endif;

	if(ListFindString(listDBs, "beeline_Hotspot") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_Hotspot";
	endif;

	if(ListFindString(listDBs, "beeline_ImportLog") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_ImportLog";
	endif;

	if(ListFindString(listDBs, "beeline_InacWeb") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_InacWeb";
	endif;

	if(ListFindString(listDBs, "beeline_InterCity") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_InterCity";
	endif;

	if(ListFindString(listDBs, "beeline_NewsSubscriptions") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_NewsSubscriptions";
	endif;

	if(ListFindString(listDBs, "beeline_NFS") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_NFS";
	endif;

	if(ListFindString(listDBs, "beeline_PhoneConfig") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_PhoneConfig";
	endif;

	if(ListFindString(listDBs, "beeline_RoamInfo") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_RoamInfo";
	endif;

	if(ListFindString(listDBs, "beeline_RPLog") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_RPLog";
	endif;

	if(ListFindString(listDBs, "beeline_skad") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_skad";
	endif;

	if(ListFindString(listDBs, "beeline_Smtp") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_Smtp";
	endif;

	if(ListFindString(listDBs, "beeline_SUKK") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_SUKK";
	endif;

	if(ListFindString(listDBs, "beeline_tariffs") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_tariffs";
	endif;

	if(ListFindString(listDBs, "beeline_TV") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_TV";
	endif;

	if(ListFindString(listDBs, "beeline_VCFCN") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_VCFCN";
	endif;

	if(ListFindString(listDBs, "beeline_wifi") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "beeline_wifi";
	endif;

	if(ListFindString(listDBs, "qp_beeline_main") != 0)
	then
		bOk = FALSE;
		szDatabaseAbsent = "qp_beeline_main";
	endif;

	return bOk;
end;*/

// QPExecuteXML
//
// - Execute XML for QP database
function QPExecuteXML(szCustomerCode, szXMLText)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	return utilsObj.QPExecuteXML(szCustomerCode, szXMLText);
end;

// QPCheckFingerprint
//
// - Check fingerprint for QP database
function QPCheckFingerprint(szCustomerCode, szXMLText)
	OBJECT utilsObj;
begin
	set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	return utilsObj.QPCheckFingerprint(szCustomerCode, szXMLText);
end;

// UpdateFrontendWebConfig
//
// - Update frontend web.config
function UpdateFrontendWebConfig(szPhysicalPath)
	OBJECT utilsObj;
	//string sztmp;
begin
	MessageBox(SUPPORTDIR^"UpdateConfig.exe", 0);
	MessageBox(szPhysicalPath + "\\web.config", 0);
	LaunchAppAndWait(SUPPORTDIR^"UpdateConfig.exe", szPhysicalPath + "\\web.config", LAAW_OPTION_WAIT|LAAW_OPTION_HIDDEN);
	//set utilsObj = DotNetCoCreateObject(SUPPORTDIR^"utils.dll", "Utils.Utils", "");
	//sztmp = utilsObj.UpdateFrontendWebConfig(szPhysicalPath);
	//MessageBox(sztmp, 0);
	return 0;
end;
