<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QA.Validation.Xaml</name>
    </assembly>
    <members>
        <member name="T:QA.Validation.Xaml.ValidationCondition">
            <summary>
            Базовый класс для всех условий валидации
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationCondition.Execute(QA.Validation.Xaml.ValidationConditionContext)">
            <summary>
            Выполнение проверок условия
            </summary>
            <param name="context">контекст</param>
            <returns>успешность выполнения (или результат)</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationCondition.GetName">
            <summary>
            Получение уникального имени для данного условия
            </summary>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationCondition.GetNotSupportedException(System.Object)">
            <summary>
            Генерация исключения (о неприменимости правила к данному значению поля)
            </summary>
            <param name="value">значение</param>
            <returns>Исключение</returns>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationCondition.StopPropagation">
            <summary>
            Остановить цепочку выполнения на этом условии
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationCondition.AddDiagnosticsSummary">
            <summary>
            Добавлять диагностические сообщения в коллекцию ошибок
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.IValueArgument">
            <summary>
            Аргумент условия валидации
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.IValueArgument.Process(QA.Validation.Xaml.PropertyDefinition,QA.Validation.Xaml.IValueProvider,QA.Validation.Xaml.ValidationConditionContext,System.Object)">
            <summary>
            Получене значения
            </summary>
            <param name="definition"></param>
            <param name="provider"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:QA.Validation.Xaml.ReplaceText">
            <summary>
            Транслитирирование текстового значения
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.FromLambda.Expression">
            <summary>
            Выражение, которые будет выполняться. Выражение должно возвращать bool.
            Примеры:
            Model["Name"] == "123"
            Int32(Value) mod 2 == 1  and Int32(Model["Age"]) > 10
            it.IsValid("Name") and Convert.ToDateTime(Value).Year > 2012
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Transliterate">
            <summary>
            Транслитирирование текстового значения
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.WithValueFormattedMessage">
            <summary>
            Добавление сообщения об ошибке.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.WithLocalizedMessage">
            <summary>
            Добавление локализованного сообщения об ошибке валидации
            Текущая культура берется из Thread.CurrentThread.CurrentUICulture
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.WithMessage">
            <summary>
            Добавление сообщения об ошибке.
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.WithMessage.GetText">
            <summary>
            Получение сообщения
            </summary>
            <returns></returns>
        </member>
        <member name="P:QA.Validation.Xaml.WithMessage.Text">
            <summary>
            Текст ошибки, который устанавливается, если данное действие вызвано.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.PropertyValidationCondition">
            <summary>
            Базовый класс для условий валидации, которые можут быть привязаны к какому-либо полю модели
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.PropertyValidationCondition.Source">
            <summary>
            Поле, для которого проверяется условие валидации (его значение используют валидаторы)
            Если выбрано условие ForMember, то данное поле указывать необязательно
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Dynamic.DynamicContext">
            <summary>
            Контекст для валидации Dynamic Expressions.
            Все методы и свойства доступны в текстовых выражениях
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.Dynamic.DynamicContext.IsValid(System.String)">
            <summary>
            Проверяет, что указанное поле корректно
            </summary>
            <param name="propertyName">Alias поля</param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.Dynamic.DynamicContext.HasErrors">
            <summary>
            Проверяет, есть ли ошибки валидации
            </summary>
            <returns></returns>
        </member>
        <member name="P:QA.Validation.Xaml.Dynamic.DynamicContext.Model">
            <summary>
            Текущие значения полей
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Dynamic.DynamicContext.Source">
            <summary>
            Описание текущего поля
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Dynamic.DynamicContext.Context">
            <summary>
            Валидационный контекст
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Dynamic.DynamicContext.Value">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Fluent.AbstractValidator`2">
            <summary>
            Базовый класс для типизированных валидаторов
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:QA.Validation.Xaml.IObjectValidator">
            <summary>
            Интерфейс валидатора объектов
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.IObjectValidator.Validate(System.Object,QA.Validation.Xaml.ValidationContext)">
            <summary>
            Валидировать поля объекта
            </summary>
            <param name="obj">объект</param>
            <param name="result">результаты валидации</param>
        </member>
        <member name="T:QA.Validation.Xaml.IDictionaryValidator">
            <summary>
            Валидатор данных
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.IDictionaryValidator.Validate(System.Collections.Generic.Dictionary{System.String,System.String},QA.Validation.Xaml.ValidationContext)">
            <summary>
            Валидация модели данных
            </summary>
            <param name="values">Данные</param>
            <param name="result">результат валидации</param>
        </member>
        <member name="T:QA.Validation.Xaml.IDynamicResourceContainer">
            <summary>
            Интерфейс класса с ресурсным словарем, конфигурируемого с помощью Xaml
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.Initialization.ValidationManager._cache">
            <summary>
            Кеш
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.Initialization.ValidationManager.TestValidator(System.String,System.String)">
            <summary>
            Проверяет корректность валидаторов. Проверяется корректность языка Xaml.
            Необходимо передавать ресурсный словарь.
            </summary>
            <param name="validatorText">Текст валидатора</param>
            <param name="dynamicResourceText">Текст ресурсного словаря</param>
        </member>
        <member name="M:QA.Validation.Xaml.Initialization.ValidationManager.TestValidator(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.IServiceProvider)">
            <summary>
            Проверяет корректность валидаторов.
            Необходимо передавать ресурсный словарь.
            </summary>
            <param name="model">Словарь с полями формы</param>
            <param name="validatorText">Текст валидатора</param>
            <param name="dynamicResourceText">Текст ресурсного словаря</param>
        </member>
        <member name="T:QA.Validation.Xaml.Markup.XamlMembersHelper">
            <summary>
            Поиск элементов графа объектов Xaml (используется в расширениях разметки)
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.Markup.XamlMembersHelper.FindNode``2(System.IServiceProvider,System.String)">
            <summary>
            Осуществляет поиск элемента графа объектов, помеченного атрибутом AmbientAttribute, по заданным критериям
            </summary>
            <typeparam name="T">Тип свойства</typeparam>
            <typeparam name="TParent">Тип объекта, содержащего свойство</typeparam>
            <param name="serviceProvider">Xaml ServiceProvider</param>
            <param name="propertyName">Имя свойства (null в случае поиска по )</param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.Markup.XamlMembersHelper.FindRoot``1(System.IServiceProvider)">
            <summary>
            Поиск корневого элемента графа объектов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:QA.Validation.Xaml.Markup.ProvideValueExtension">
            <summary>
            Осуществляет поиск ресурса в ресурсоном словаре текущего или корневого элемента
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Markup.ProvideValueExtension.Definition">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Adapters.ReflectionModelAdapter`1">
            <summary>
            Преобразование модели, основанное на reflection (c кешированием)
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Adapters.ReflectionModelAdapter">
            <summary>
            Преобразование модели, основанное на reflection  (без кеширования)
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.LengthInRange">
            <summary>
            Проверяет длину строки, массива или любого типа, реализующего IEnumerable
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.LengthInRange.To">
            <summary>
            Минимальная длина
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.LengthInRange.From">
            <summary>
            Максимальная длина
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.MatchesForEachLine">
            <summary>
            Условие соответствия регилярному выражению.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Matches">
            <summary>
            Условие соответствия регилярному выражению.
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Matches.Expression">
            <summary>
            Текст регулярного выражения
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Matches.RegexOptions">
            <summary>
            Опции регулярного выражения
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.MatchesForEachLine.Expression">
            <summary>
            Текст регулярного выражения
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.MatchesForEachLine.RegexOptions">
            <summary>
            Опции регулярного выражения
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.SatisfyExpression">
            <summary>
            Проверяет 
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.SatisfyExpression.Execute(QA.Validation.Xaml.ValidationConditionContext)">
            <summary>
            Выполнение действия
            </summary>
            <param name="context">контекст</param>
            <returns></returns>
        </member>
        <member name="P:QA.Validation.Xaml.SatisfyExpression.Expression">
            <summary>
            Выражение, которые будет выполняться. Выражение должно возвращать bool.
            Примеры:
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.RuleConditions.SqlCondition.OnValidating(QA.Validation.Xaml.ValidationConditionContext)">
            <summary>
            Метод, вызывающийся беред открытием подключения к БД.
            Здесь необходимо произвести проверки валидности правила.
            </summary>
            <param name="context">контекст валидации</param>
            <returns>результат проверок</returns>
        </member>
        <member name="M:QA.Validation.Xaml.RuleConditions.SqlCondition.Validate(System.Data.SqlClient.SqlConnection,QA.Validation.Xaml.ValidationConditionContext)">
            <summary>
            Метод, вызывающийся для произведения валидации. 
            При этом передается открытое подключение к БД.
            </summary>
            <param name="connection">подключение к БД</param>
            <param name="context">контекст валидации</param>
            <returns>результат валидации</returns>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationContextBase.Messages">
            <summary>
            Нетаргетированные сообщения об ошибках (validation summary)
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationContextBase.Result">
            <summary>
            Объект с ошибками валидации конкретных полей
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValueProvider">
            <summary>
            Предоставляет доступ к значениям полей
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.IsFalse">
            <summary>
            Сравнивает значения поля с False
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.IsTrue">
            <summary>
            Сравнивает значения поля с True
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ForEach">
            <summary>
            Операнд ЦИКЛ
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.CompositeCondition">
            <summary>
            Базовый класс для составных условий валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.CompositeCondition.Condition">
            <summary>
            Дочернее условие
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QA.Validation.Xaml.And" -->
        <member name="T:QA.Validation.Xaml.MultiCondition">
            <summary>
            Базовый класс для условий-контейнеров валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.MultiCondition.Items">
            <summary>
            Коллекция вложенных условий
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Or">
            <summary>
            Операнд ИЛИ. Выполняются условия из коллекции MultiCondition.Items
            Выполнение будет остановлено на первом успешном условии.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.If">
            <summary>
            Ветвление ЕСЛИ
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.If.Then">
            <summary>
            Выполняется если выполнено условие
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.If.Else">
            <summary>
            Выполняется если не выполнено условие
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Not">
            <summary>
            Операнд ОТРИЦАНИЕ
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.RequiredIf">
            <summary>
            Устанавливает ошибку для текущего свойства, если выполнено условие
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Sequence">
            <summary>
            Выполняются по цепочке условия из коллекции MultiCondition.Items
            Выполнение будет остановлено, если .
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.DynamicResourceDictionaryContainer">
            <summary>
            Внешний подключаемый ресурсный словарь
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Fluent.AbstractValidator`1">
            <summary>
            Базовый класс для типизированных валидаторов
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:QA.Validation.Xaml.Fluent.FluentExtensions">
            <summary>
            Этот функционал не готов
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationContextExtensions">
            <summary>
            Расширения
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationContextExtensions.AddModelError``1(``0,System.String,System.String)">
            <summary>
            Добавление ошибки для поля с установкой IsValid = false
            </summary>
            <param name="context">контекст</param>
            <param name="propertyName">имя свойства</param>
            <param name="message">сообщение</param>
            <returns>context</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationContextExtensions.AddErrorMessage``1(``0,System.String)">
            <summary>
            Добавление текста ошибки с установкой IsValid = false
            </summary>
            <param name="context">контекст</param>
            <param name="message">сообщение</param>
            <returns>context</returns>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationServices">
            <summary>
            Основные методы для работы с валидацией
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.ValidateModel(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String[],System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Валидация данных.
            </summary>
            <param name="model">Словарь имя поля - текстовое значение. Массивы string[] и int[] представлять как "12, 23, 12"</param>
            <param name="validator">Основное валидатор контента</param>
            <param name="aggregatedValidatorList">Валидаторы для агрегированных статей</param>
            <param name="dynamicResource">Ресурсный словарь</param>
            <param name="connection">текущее подключение к БД</param>
            <returns>Объект с результатами валидации</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.ValidateModel(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String[],System.String)">
            <summary>
            Валидация данных.
            </summary>
            <param name="model">Словарь имя поля - текстовое значение. Массивы string[] и int[] представлять как "12, 23, 12"</param>
            <param name="validator">Основное валидатор контента</param>
            <param name="aggregatedValidatorList">Валидаторы для агрегированных статей</param>
            <param name="dynamicResource">Ресурсный словарь</param>
            <returns>Объект с результатами валидации</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.ValidateModel(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Валидация данных.
            </summary>
            <param name="model">Словарь имя поля - текстовое значение. Массивы string[] и int[] представлять как "12, 23, 12"</param>
            <param name="validator">Основное валидатор контента</param>
            <param name="dynamicResource">Ресурсный словарь</param>
            <returns>Объект с результатами валидации</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.ValidateModel(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Валидация данных.
            </summary>
            <param name="model">Словарь имя поля - текстовое значение. Массивы string[] и int[] представлять как "12, 23, 12"</param>
            <param name="validator">Основное валидатор контента</param>
            <param name="connection">текущее подключение к БД</param>
            <param name="dynamicResource">Ресурсный словарь</param>
            <returns>Объект с результатами валидации</returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.TestValidator(System.String,System.String)">
            <summary>
            Проверяет корректность валидатора.
            Данный метод можно использовать для начальной проверки корректности синтаксиса Xaml, 
            корректности пространств имен используемых типов.
            Необходимо передавать ресурный словарь.
            </summary>
            <param name="validatorText">текст с xaml-описанием валидатора</param>
            <param name="dynamicResourceText">ресурсный словарь</param>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.TestValidator(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Создает экземпляр валидатора нетипизированных моделей. И валидирует модель с пустыми значениями.
            Данный метод можно использовать для проверки корректности логики валидатора.
            </summary>
            <param name="validatorText">текст с xaml-описанием валидатора</param>
            <param name="model">Словарь со всеми полями, участвующими в валидации. Значения должны быть пустыми</param>
            <param name="dynamicResourceText">ресурсный словарь</param>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.TestValidator(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Создает экземпляр валидатора нетипизированных моделей. И валидирует модель с пустыми значениями.
            Данный метод можно использовать для проверки корректности логики валидатора.
            </summary>
            <param name="validatorText">текст с xaml-описанием валидатора</param>
            <param name="model">Словарь со всеми полями, участвующими в валидации. Значения должны быть пустыми</param>
            <param name="dynamicResourceText">ресурсный словарь</param>
            <param name="connection">текущее подключение к БД</param>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.TestResourceDictionary(System.String)">
            <summary>
            Проверяет корректность ресурсного словаря.
            <param name="dynamicResourceText">Текст xaml c описанием словаря</param>
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.GenerateXamlValidatorText(System.Collections.Generic.IEnumerable{QA.Validation.Xaml.PropertyDefinition})">
            <summary>
            Генерация пустого xaml-валидатора с указанными полями и их типами
            </summary>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.GenerateEmptyDynamicResourceText">
            <summary>
            Генерация текста пустого подключаемого ресурсного словаря
            </summary>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.GenerateDynamicResourceText(QA.Validation.Xaml.DynamicResourceDictionaryContainer)">
            <summary>
            Генерация текста подключаемого ресурсного словаря
            </summary>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationServices.GetPropertyDefinitions(System.String,System.String)">
            <summary>
            Получение списка полей, использующихся в валидаторе.
            Если валидатор некорректен, выкидывается исключение. 
            Данный метод уже включает проверку XamlSerices.TestValidator.
            </summary>
            <param name="validatorText"></param>
            <param name="dynamicResourceText"></param>
            <returns></returns>
        </member>
        <member name="T:QA.Validation.Xaml.Markup.DynamicResourceExtension">
            <summary>
            Осуществляет поиск ресурса в ресурсоном словаре текущего или корневого элемента
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Markup.DynamicResourceExtension.Name">
            <summary>
            Имя словаря
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Markup.DynamicResourceExtension.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.TypeConverters.ListOfStringTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Конвертировать в string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.TypeConverters.ListOfIntTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Конвертировать в string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:QA.Validation.Xaml.XamlValidator">
            <summary>
            Валидатор для нетипизированных моделей
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.XamlValidatorBase.ValidationRules">
            <summary>
            Правила валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.XamlValidatorBase.Definitions">
            <summary>
            Описания полейы
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.IValueProvider.GetValue(QA.Validation.Xaml.PropertyDefinition)">
            <summary>
            Получить значение
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:QA.Validation.Xaml.IValueProvider.SetValue(QA.Validation.Xaml.PropertyDefinition,System.Object)">
            <summary>
            Установить значение
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="T:QA.Validation.Xaml.MemberValidationRule">
            <summary>
            Правило валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.MemberValidationRule.Condition">
            <summary>
            Условие валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.MemberValidationRule.Definition">
            <summary>
            Поле, которое бкдет валидироваться
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ObjectValidationRule.Condition">
            <summary>
            Условие правила
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.PropertyDefinition">
            <summary>
            Класс описания одного поля модели. Включает ключ, название, тип и комментарий
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.PropertyDefinition.Copy">
            <summary>
            Копирует экземпляр данного типа
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.PropertyDefinition.PropertyType">
            <summary>
            Тип свойства
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.PropertyDefinition.PropertyName">
            <summary>
            Название свойства.
            По названию осуществляется поиск значения при  валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.PropertyDefinition.Alias">
            <summary>
            Уникальное дружественное имя данного поля.
            Используется в качестве ключа в Xaml при применении DefinitionMarkupExtension
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.PropertyDefinition.Description">
            <summary>
            Текстовый комментарий.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.AreEqual">
            <summary>
            Проверяет два свойства на равенство
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Length">
            <summary>
            Проверяет длину строки, массива или любого типа, реализующего IEnumerable
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Length.MaxLength">
            <summary>
            Минимальная длина
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Length.MinLength">
            <summary>
            Максимальная длина
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.GreaterThan">
            <summary>
            Оператор сравнения.
            Введенное значение приводится к типу поля.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.LessThan">
            <summary>
            Оператор сравнения.
            Введенное значение приводится к типу поля.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ForMember">
            <summary>
            Валидационное правило. Применяется к конкретному полу.
            Ошибки валидации выводятся в списке ValidationContext.Result.Errors
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Must">
            <summary>
            Валидационное правило. Применяется ко всей модели.
            Ошибки валидации выводятся в списке общих сообщений
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationConditionContext">
            <summary>
            Содержит информацию о текущей сессии валидации.
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.IsValid">
            <summary>
            Общий флаг успешности валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.Messages">
            <summary>
            Valudation summary (нетаргетированные сообщения)
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.Definition">
            <summary>
            Описание текущего поля
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.All">
            <summary>
            Описания полей всего валидатора
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.Result">
            <summary>
            Результаты валидации (контейнер ошибок)
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.ValueProvider">
            <summary>
            Провайдер значения поля
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationConditionContext.ServiceProvider">
            <summary>
            Провайдер доступа к конфигурационным объектам
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationConfiguration">
            <summary>
            Контейнер для типизированных валидаторов, который может быть секцией конфигурационного файла приложения.
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationContext">
            <summary>
            Объект с результатами валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationContext.IsValid">
            <summary>
            Флаг корректноси модели (результат валидации)
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationContext.ServiceProvider">
            <summary>
            Объект, предоставляющий доступ правилам валидации к дополнительному функционалу.
            Является необязательным
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationError">
            <summary>
            Объект с информацией об ошибке валидации
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationError.Definition">
            <summary>
            Описание поля
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationError.Message">
            <summary>
            Валидационное сообщение
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.ValidationResult">
            <summary>
            Контейнер с ошибками валидации полей
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationResult.AddError(QA.Validation.Xaml.PropertyDefinition,System.String)">
            <summary>
            Добавить ошибку для поля
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.ValidationResult.AddError(System.String,System.String)">
            <summary>
            Добавить ошибку для поля
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.ValidationResult.Errors">
            <summary>
            Список ошибок
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.XamlObjectValidator">
            <summary>
            Валидатор для типизированных моделей
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.Markup.DefinitionExtension">
            <summary>
            Осуществляет поиск ресурса в ресурсоном словаре текущего или корневого элемента
            </summary>
        </member>
        <member name="P:QA.Validation.Xaml.Markup.DefinitionExtension.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.XamlValidatorException">
            <summary>
            Ошибки, связанные с валидатором
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.#ctor(QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason,System.String)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.#ctor(QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason,System.String,System.Exception)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:QA.Validation.Xaml.XamlValidatorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:QA.Validation.Xaml.XamlValidatorException.Reason">
            <summary>
            Причина возникновения ошибки
            </summary>
        </member>
        <member name="T:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason">
            <summary>
            Причина возникновения ошибки XamlValidatorException
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason.General">
            <summary>
            Причина ошибки не указана
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason.ParsingError">
            <summary>
            Текст валидатора некорректен (ошибка разбора)
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason.ValidatorCompositionError">
            <summary>
            Текст валидатора корректен, но есть ошибки в настройках некоторых условий или правил
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason.ValidatorError">
            <summary>
            Текст валидатора корректен, но есть ошибки в настройках самого валидатора (опсиания полей, уникальность, итд)
            </summary>
        </member>
        <member name="F:QA.Validation.Xaml.XamlValidatorException.ValidatorErrorReason.ProvidedDataError">
            <summary>
            Ошибка вызвана данными формы
            </summary>
        </member>
    </members>
</doc>
