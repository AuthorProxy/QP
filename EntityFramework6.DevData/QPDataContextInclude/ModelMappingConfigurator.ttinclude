<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+ void AddModelMappingConfigurator(GenerationContext context){
var model = context.Model;
var settings = context.Settings;
#>
using System;
using System.Collections.Concurrent;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Threading;
using Quantumart.QP8.CodeGeneration.Services;
<#= settings.Usings#>

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")#>
{
    public class <#=model.Schema.ClassName#>MappingConfigurator : MappingConfiguratorBase
    {	
        public <#=model.Schema.ClassName#>MappingConfigurator()
            : base()
        {
		}

        public <#=model.Schema.ClassName#>MappingConfigurator(ContentAccess contentAccess)
            : base(contentAccess)
        {
		}

		protected override ModelReader GetDynamicModel()
        {
			throw new NotImplementedException();
        }
       
        public override void OnModelCreating(DbModelBuilder modelBuilder)
        {
			base.OnModelCreating(modelBuilder);
			<#+ MappingConfiguratorOnModelCreating(context, GetStaticTableMapping, GetStaticLinkTableMapping, GetStaticReversedLinkTablMapping); #>
        }
    }
}
<#+
}
string GetStaticTableMapping(ContentInfo content)
{
	return string.Format("GetTableName({0}, {1})", content.Id, content.UseDefaultFiltration.ToString().ToLower());
}

string GetStaticLinkTableMapping(ContentInfo content, AttributeInfo field)
{
	return string.Format("GetLinkTableName({0})", field.LinkId);
}

string GetStaticReversedLinkTablMapping(ContentInfo content, AttributeInfo field)
{
	return string.Format("GetReversedLinkTableName({0})", field.LinkId);
}
#>