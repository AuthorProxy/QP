@model SearchInArticlesListViewModel

@using Quantumart.QP8.Resources
@using Quantumart.QP8.Constants
@using Quantumart.QP8.WebMvc.ViewModels
@using Quantumart.QP8.BLL

@using (Html.BeginDocumentPadding())
{

    <form class="formLayout" id="@Model.SearchLayoutFormElementId">
	    <div id="@Model.SeachBlockElementId" class="simpleSeachBlock">		
		    @Html.TextBox(@Model.SearchTextBoxElementId, String.Empty, new { @class = "textbox" })				
		    <input type="button" id="@Model.SearchButtonElementId" value="@ArticleStrings.Find" class="button" />					
	    </div>
    </form>

    @(Html.Telerik().Grid<SearchInArticlesResultItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
            {
                c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                    .Width(30)
                    .HtmlAttributes(new { @class = "id" })
                    ;
                c.Bound(s => s.Name)
                    .Title(ArticleStrings.Title)
                    .Sortable(false)
                    .HtmlAttributes(new { @class = "title" });
                c.Bound(s => s.ParentName)
                    .Title(ArticleStrings.ParentName);
                c.Bound(s => s.Text)
                    .Title(EntityObjectStrings.Description)
                    .Encoded(false);
                c.Bound(s => s.StatusName)
                    .Title(ArticleStrings.Status);
                c.Bound(s => s.Created)
                    .Title(EntityObjectStrings.Created);
                c.Bound(s => s.Modified)
                    .Title(EntityObjectStrings.Modified);
                c.Bound(s => s.LastModifiedByUser)
                    .Title(EntityObjectStrings.LastModifiedBy);
            })
        .DataBinding(db => db.Ajax()
            .Select(Model.DataBindingActionName, Model.DataBindingControllerName)
        )
        .EnableCustomBinding(true)
        .Sortable()
            .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(false))
        .ClientEvents(e =>
            e.OnDataBinding("$q.preventDefaultFunction")
             .OnRowDataBound("$q.preventDefaultFunction")
        )
    )
}

@Html.PrepareInitScript(Model)
<script type="text/javascript">	
	@(Model.ContextObjectName).set_initializedCallback(function() {				
		var sb = new Quantumart.QP8.BackendSearchInArticle("@Model.MainComponentId", "@Model.SeachBlockElementId", "@Model.Query", this);
		sb.initialize();
		this.searchBlock = sb;	
		
		jQuery("#@Model.SearchLayoutFormElementId").submit(function (e) 
		{ 
			e.preventDefault(); 
			jQuery("#@Model.SearchButtonElementId").trigger("click");
			return false;
		})
	});	
	@(Model.ContextObjectName).set_terminatingCallback(function() {				
		if(this.searchBlock)
		{
			this.searchBlock.dispose();
			this.searchBlock = null;
		}

		jQuery("#@Model.SearchLayoutFormElementId").unbind("submit");
	});
	
	@(Model.ContextObjectName).set_execSelectCallback(function(eventArgs) {
		if(this.searchBlock)
			this.searchBlock.refreshQuery(eventArgs);
	});

</script>
@Html.RunInitScript(Model)


@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
