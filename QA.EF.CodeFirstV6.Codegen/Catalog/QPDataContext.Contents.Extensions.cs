// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace QA.EF.CodeFirstV6.Codegen.Catalog
{
	public partial class GeoRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<GeoRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<GeoRegion,  IQPFormService, string>>
		{
			{ "Title", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Parent_ID", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "OldId", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.OldId != null ? self.OldId.ToString() : null) },
			{ "OldParentId", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.OldParentId != null ? self.OldParentId.ToString() : null) },
			{ "MarketingRegion_ID", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.MarketingRegion_ID != null ? self.MarketingRegion_ID.ToString() : null) },
			{ "MniId", new Func<GeoRegion, IQPFormService, string>((self, ctx) => self.MniId != null ? self.MniId.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OldIdExact { get { return this.OldId == null ? default(Int32) : this.OldId.Value; } }
		public Int32 OldParentIdExact { get { return this.OldParentId == null ? default(Int32) : this.OldParentId.Value; } }
		public Int32 MniIdExact { get { return this.MniId == null ? default(Int32) : this.MniId.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("GeoRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingRegion,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Parent_ID", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "Url", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
			{ "IsPopular", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.IsPopular != null ? self.IsPopular.Value ? "1" : "0" : null) },
			{ "IsMain", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.IsMain != null ? self.IsMain.Value ? "1" : "0" : null) },
			{ "Has3G", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Has3G != null ? self.Has3G.Value ? "1" : "0" : null) },
			{ "IsB2B", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.IsB2B != null ? self.IsB2B.Value ? "1" : "0" : null) },
			{ "Lat", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lat != null ? self.Lat.ToString() : null) },
			{ "Lon", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lon != null ? self.Lon.ToString() : null) },
			{ "Lon1", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lon1 != null ? self.Lon1.ToString() : null) },
			{ "Lat1", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lat1 != null ? self.Lat1.ToString() : null) },
			{ "Lon2", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lon2 != null ? self.Lon2.ToString() : null) },
			{ "Lat2", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Lat2 != null ? self.Lat2.ToString() : null) },
			{ "GMT", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.GMT != null ? self.GMT.ToString() : null) },
			{ "RegionAddress", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.RegionAddress != null ? ctx.ReplacePlaceholders(self.RegionAddress) : null) },
			{ "RegionPhone", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.RegionPhone != null ? ctx.ReplacePlaceholders(self.RegionPhone) : null) },
			{ "Order", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "TitlePreposition", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.TitlePreposition != null ? ctx.ReplacePlaceholders(self.TitlePreposition) : null) },
			{ "TitlePrepositionEngl", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.TitlePrepositionEngl != null ? ctx.ReplacePlaceholders(self.TitlePrepositionEngl) : null) },
			{ "TitlePrepositionTat", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.TitlePrepositionTat != null ? ctx.ReplacePlaceholders(self.TitlePrepositionTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsPopularExact { get { return this.IsPopular == null ? default(Boolean) : this.IsPopular.Value; } }
		public Boolean IsMainExact { get { return this.IsMain == null ? default(Boolean) : this.IsMain.Value; } }
		public Boolean Has3GExact { get { return this.Has3G == null ? default(Boolean) : this.Has3G.Value; } }
		public Boolean IsB2BExact { get { return this.IsB2B == null ? default(Boolean) : this.IsB2B.Value; } }
		public Double LatExact { get { return this.Lat == null ? default(Double) : this.Lat.Value; } }
		public Double LonExact { get { return this.Lon == null ? default(Double) : this.Lon.Value; } }
		public Double Lon1Exact { get { return this.Lon1 == null ? default(Double) : this.Lon1.Value; } }
		public Double Lat1Exact { get { return this.Lat1 == null ? default(Double) : this.Lat1.Value; } }
		public Double Lon2Exact { get { return this.Lon2 == null ? default(Double) : this.Lon2.Value; } }
		public Double Lat2Exact { get { return this.Lat2 == null ? default(Double) : this.Lat2.Value; } }
		public Int32 GMTExact { get { return this.GMT == null ? default(Int32) : this.GMT.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Url = context.ReplacePlaceholders(this.Url);
			this.RegionAddress = context.ReplacePlaceholders(this.RegionAddress);
			this.RegionPhone = context.ReplacePlaceholders(this.RegionPhone);
			this.TitlePreposition = context.ReplacePlaceholders(this.TitlePreposition);
			this.TitlePrepositionEngl = context.ReplacePlaceholders(this.TitlePrepositionEngl);
			this.TitlePrepositionTat = context.ReplacePlaceholders(this.TitlePrepositionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class GeoRegionsIPAddress: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<GeoRegionsIPAddress, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<GeoRegionsIPAddress,  IQPFormService, string>>
		{
			{ "GeoRegion_ID", new Func<GeoRegionsIPAddress, IQPFormService, string>((self, ctx) => self.GeoRegion_ID != null ? self.GeoRegion_ID.ToString() : null) },
			{ "IpFrom", new Func<GeoRegionsIPAddress, IQPFormService, string>((self, ctx) => self.IpFrom != null ? self.IpFrom.ToString() : null) },
			{ "IpTo", new Func<GeoRegionsIPAddress, IQPFormService, string>((self, ctx) => self.IpTo != null ? self.IpTo.ToString() : null) },
			{ "OldGniId", new Func<GeoRegionsIPAddress, IQPFormService, string>((self, ctx) => self.OldGniId != null ? self.OldGniId.ToString() : null) },
			{ "OldId", new Func<GeoRegionsIPAddress, IQPFormService, string>((self, ctx) => self.OldId != null ? self.OldId.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int64 IpFromExact { get { return this.IpFrom == null ? default(Int64) : this.IpFrom.Value; } }
		public Int64 IpToExact { get { return this.IpTo == null ? default(Int64) : this.IpTo.Value; } }
		public Int32 OldGniIdExact { get { return this.OldGniId == null ? default(Int32) : this.OldGniId.Value; } }
		public Int32 OldIdExact { get { return this.OldId == null ? default(Int32) : this.OldId.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("GeoRegionsIPAddress", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SiteProduct: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SiteProduct, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteProduct,  IQPFormService, string>>
		{
			{ "Title", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Mask", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.Mask != null ? ctx.ReplacePlaceholders(self.Mask) : null) },
			{ "RegularExpression", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.RegularExpression != null ? ctx.ReplacePlaceholders(self.RegularExpression) : null) },
			{ "SiteNum", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.SiteNum != null ? self.SiteNum.ToString() : null) },
			{ "StageMask", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.StageMask != null ? ctx.ReplacePlaceholders(self.StageMask) : null) },
			{ "StageTitle", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.StageTitle != null ? ctx.ReplacePlaceholders(self.StageTitle) : null) },
			{ "DefaultRegion_ID", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.DefaultRegion_ID != null ? self.DefaultRegion_ID.ToString() : null) },
			{ "OldId", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.OldId != null ? self.OldId.ToString() : null) },
			{ "SortOrder", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "TitleEngl", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DefaultDeviceType_ID", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.DefaultDeviceType_ID != null ? self.DefaultDeviceType_ID.ToString() : null) },
			{ "PrepositionalTitle", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.PrepositionalTitle != null ? ctx.ReplacePlaceholders(self.PrepositionalTitle) : null) },
			{ "PrepositionalTitleEngl", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.PrepositionalTitleEngl != null ? ctx.ReplacePlaceholders(self.PrepositionalTitleEngl) : null) },
			{ "PrepositionalTitleTat", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.PrepositionalTitleTat != null ? ctx.ReplacePlaceholders(self.PrepositionalTitleTat) : null) },
			{ "FeedbackDefaultTheme_ID", new Func<SiteProduct, IQPFormService, string>((self, ctx) => self.FeedbackDefaultTheme_ID != null ? self.FeedbackDefaultTheme_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SiteNumExact { get { return this.SiteNum == null ? default(Int32) : this.SiteNum.Value; } }
		public Int32 OldIdExact { get { return this.OldId == null ? default(Int32) : this.OldId.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Mask = context.ReplacePlaceholders(this.Mask);
			this.RegularExpression = context.ReplacePlaceholders(this.RegularExpression);
			this.StageMask = context.ReplacePlaceholders(this.StageMask);
			this.StageTitle = context.ReplacePlaceholders(this.StageTitle);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.PrepositionalTitle = context.ReplacePlaceholders(this.PrepositionalTitle);
			this.PrepositionalTitleEngl = context.ReplacePlaceholders(this.PrepositionalTitleEngl);
			this.PrepositionalTitleTat = context.ReplacePlaceholders(this.PrepositionalTitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteProduct", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPAbstractItem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPAbstractItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPAbstractItem,  IQPFormService, string>>
		{
			{ "Title", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Parent_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "IsVisible", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsVisible != null ? self.IsVisible.Value ? "1" : "0" : null) },
			{ "IsPage", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "ZoneName", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ZoneName != null ? ctx.ReplacePlaceholders(self.ZoneName) : null) },
			{ "AllowedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.AllowedUrlPatterns != null ? self.AllowedUrlPatterns : null) },
			{ "DeniedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.DeniedUrlPatterns != null ? self.DeniedUrlPatterns : null) },
			{ "Description", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Discriminator_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Discriminator_ID != null ? self.Discriminator_ID.ToString() : null) },
			{ "ContentId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ContentId != null ? self.ContentId.ToString() : null) },
			{ "VersionOf_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.VersionOf_ID != null ? self.VersionOf_ID.ToString() : null) },
			{ "Culture_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Culture_ID != null ? self.Culture_ID.ToString() : null) },
			{ "TitleFormat_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "Keywords", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Keywords != null ? ctx.ReplacePlaceholders(self.Keywords) : null) },
			{ "MetaDescription", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? ctx.ReplacePlaceholders(self.MetaDescription) : null) },
			{ "Tags", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Tags != null ? self.Tags : null) },
			{ "IsInSiteMap", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsInSiteMap != null ? self.IsInSiteMap.Value ? "1" : "0" : null) },
			{ "IndexOrder", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IndexOrder != null ? self.IndexOrder.ToString() : null) },
			{ "ExtensionId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ExtensionId != null ? self.ExtensionId.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsVisibleExact { get { return this.IsVisible == null ? default(Boolean) : this.IsVisible.Value; } }
		public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
		public Int32 ContentIdExact { get { return this.ContentId == null ? default(Int32) : this.ContentId.Value; } }
		public Boolean IsInSiteMapExact { get { return this.IsInSiteMap == null ? default(Boolean) : this.IsInSiteMap.Value; } }
		public Int32 IndexOrderExact { get { return this.IndexOrder == null ? default(Int32) : this.IndexOrder.Value; } }
		public Int32 ExtensionIdExact { get { return this.ExtensionId == null ? default(Int32) : this.ExtensionId.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.ZoneName = context.ReplacePlaceholders(this.ZoneName);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Keywords = context.ReplacePlaceholders(this.Keywords);
			this.MetaDescription = context.ReplacePlaceholders(this.MetaDescription);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPAbstractItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPDiscriminator: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPDiscriminator, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPDiscriminator,  IQPFormService, string>>
		{
			{ "Title", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "PreferredContentId", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.PreferredContentId != null ? self.PreferredContentId.ToString() : null) },
			{ "CategoryName", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.CategoryName != null ? ctx.ReplacePlaceholders(self.CategoryName) : null) },
			{ "Description", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "IconUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IconUrl != null ? self.IconUrl : null) },
			{ "IsPage", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "AllowedZones", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.AllowedZones != null ? ctx.ReplacePlaceholders(self.AllowedZones) : null) },
			{ "FilterPartByUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.FilterPartByUrl != null ? self.FilterPartByUrl.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrlUrl { get; set; }
		public string IconUrlUploadPath { get; set; }
		public Int32 PreferredContentIdExact { get { return this.PreferredContentId == null ? default(Int32) : this.PreferredContentId.Value; } }
		public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
		public Boolean FilterPartByUrlExact { get { return this.FilterPartByUrl == null ? default(Boolean) : this.FilterPartByUrl.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.CategoryName = context.ReplacePlaceholders(this.CategoryName);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.AllowedZones = context.ReplacePlaceholders(this.AllowedZones);
			this.IconUrlUrl = context.GetUrl(this.IconUrl, "QPDiscriminator", "IconUrl");
			this.IconUrlUploadPath = context.GetUploadPath(this.IconUrl, "QPDiscriminator", "IconUrl");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPDiscriminator", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPCulture: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPCulture, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPCulture,  IQPFormService, string>>
		{
			{ "Title", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Icon", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconUploadPath { get; set; }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.IconUrl = context.GetUrl(this.Icon, "QPCulture", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "QPCulture", "Icon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPCulture", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ItemTitleFormat: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ItemTitleFormat, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ItemTitleFormat,  IQPFormService, string>>
		{
			{ "Value", new Func<ItemTitleFormat, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "Description", new Func<ItemTitleFormat, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Value = context.ReplacePlaceholders(this.Value);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ItemTitleFormat", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPRegion,  IQPFormService, string>>
		{
			{ "Title", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "ParentId", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.ParentId != null ? self.ParentId.ToString() : null) },
			{ "Alias", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
		};

		#endregion
		#region Genarated properties
		public Double ParentIdExact { get { return this.ParentId == null ? default(Double) : this.ParentId.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Poll: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Poll, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Poll,  IQPFormService, string>>
		{
			{ "Title", new Func<Poll, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "MarketCodes", new Func<Poll, IQPFormService, string>((self, ctx) => self.MarketCodes != null ? self.MarketCodes : null) },
			{ "StartDate", new Func<Poll, IQPFormService, string>((self, ctx) => self.StartDate != null ? self.StartDate.ToString() : null) },
			{ "EndDate", new Func<Poll, IQPFormService, string>((self, ctx) => self.EndDate != null ? self.EndDate.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Poll", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PollQuestion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PollQuestion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PollQuestion,  IQPFormService, string>>
		{
			{ "Text", new Func<PollQuestion, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Poll_ID", new Func<PollQuestion, IQPFormService, string>((self, ctx) => self.Poll_ID != null ? self.Poll_ID.ToString() : null) },
			{ "NumberOfAnswers", new Func<PollQuestion, IQPFormService, string>((self, ctx) => self.NumberOfAnswers != null ? self.NumberOfAnswers.ToString() : null) },
			{ "SortOrder", new Func<PollQuestion, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 NumberOfAnswersExact { get { return this.NumberOfAnswers == null ? default(Int32) : this.NumberOfAnswers.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PollQuestion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PollAnswer: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PollAnswer, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PollAnswer,  IQPFormService, string>>
		{
			{ "Text", new Func<PollAnswer, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Question_ID", new Func<PollAnswer, IQPFormService, string>((self, ctx) => self.Question_ID != null ? self.Question_ID.ToString() : null) },
			{ "SortOrder", new Func<PollAnswer, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PollAnswer", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class UserPollAnswer: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<UserPollAnswer, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<UserPollAnswer,  IQPFormService, string>>
		{
			{ "User", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.User != null ? ctx.ReplacePlaceholders(self.User) : null) },
			{ "Answer_ID", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.Answer_ID != null ? self.Answer_ID.ToString() : null) },
			{ "Question_ID", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.Question_ID != null ? self.Question_ID.ToString() : null) },
			{ "Poll_ID", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.Poll_ID != null ? self.Poll_ID.ToString() : null) },
			{ "MarketCode", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.MarketCode != null ? ctx.ReplacePlaceholders(self.MarketCode) : null) },
			{ "AnswerCode", new Func<UserPollAnswer, IQPFormService, string>((self, ctx) => self.AnswerCode != null ? ctx.ReplacePlaceholders(self.AnswerCode) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.User = context.ReplacePlaceholders(this.User);
			this.MarketCode = context.ReplacePlaceholders(this.MarketCode);
			this.AnswerCode = context.ReplacePlaceholders(this.AnswerCode);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("UserPollAnswer", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TrailedAbstractItem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TrailedAbstractItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TrailedAbstractItem,  IQPFormService, string>>
		{
			{ "Trail", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Trail != null ? ctx.ReplacePlaceholders(self.Trail) : null) },
			{ "Title", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Trail = context.ReplacePlaceholders(this.Trail);
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TrailedAbstractItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPObsoleteUrl: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPObsoleteUrl, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPObsoleteUrl,  IQPFormService, string>>
		{
			{ "Url", new Func<QPObsoleteUrl, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
			{ "AbstractItem_ID", new Func<QPObsoleteUrl, IQPFormService, string>((self, ctx) => self.AbstractItem_ID != null ? self.AbstractItem_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Url = context.ReplacePlaceholders(this.Url);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPObsoleteUrl", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RegionTag: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RegionTag, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RegionTag,  IQPFormService, string>>
		{
			{ "Title", new Func<RegionTag, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RegionTag", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RegionTagValue: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RegionTagValue, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RegionTagValue,  IQPFormService, string>>
		{
			{ "RegionTag_ID", new Func<RegionTagValue, IQPFormService, string>((self, ctx) => self.RegionTag_ID != null ? self.RegionTag_ID.ToString() : null) },
			{ "Value", new Func<RegionTagValue, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Value = context.ReplacePlaceholders(this.Value);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RegionTagValue", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SearchSuggestion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SearchSuggestion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SearchSuggestion,  IQPFormService, string>>
		{
			{ "Title", new Func<SearchSuggestion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Priority", new Func<SearchSuggestion, IQPFormService, string>((self, ctx) => self.Priority != null ? self.Priority.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 PriorityExact { get { return this.Priority == null ? default(Int32) : this.Priority.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SearchSuggestion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SearchResult: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SearchResult, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SearchResult,  IQPFormService, string>>
		{
			{ "Query", new Func<SearchResult, IQPFormService, string>((self, ctx) => self.Query != null ? ctx.ReplacePlaceholders(self.Query) : null) },
			{ "PageUrl", new Func<SearchResult, IQPFormService, string>((self, ctx) => self.PageUrl != null ? ctx.ReplacePlaceholders(self.PageUrl) : null) },
			{ "IsTop", new Func<SearchResult, IQPFormService, string>((self, ctx) => self.IsTop != null ? self.IsTop.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsTopExact { get { return this.IsTop == null ? default(Boolean) : this.IsTop.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Query = context.ReplacePlaceholders(this.Query);
			this.PageUrl = context.ReplacePlaceholders(this.PageUrl);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SearchResult", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SiteSection: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SiteSection, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteSection,  IQPFormService, string>>
		{
			{ "Title", new Func<SiteSection, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SortOrder", new Func<SiteSection, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "TitleEngl", new Func<SiteSection, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<SiteSection, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteSection", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class NewsCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<NewsCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<NewsCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<NewsCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<NewsCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<NewsCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("NewsCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class NewsArticle: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<NewsArticle, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<NewsArticle,  IQPFormService, string>>
		{
			{ "Title", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "StartPublishDate", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.StartPublishDate != null ? self.StartPublishDate.ToString() : null) },
			{ "EndPublishDate", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.EndPublishDate != null ? self.EndPublishDate.ToString() : null) },
			{ "Category_ID", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Category_ID != null ? self.Category_ID.ToString() : null) },
			{ "SiteProduct_ID", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.SiteProduct_ID != null ? self.SiteProduct_ID.ToString() : null) },
			{ "ShowOnWeb", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.ShowOnWeb != null ? self.ShowOnWeb.Value ? "1" : "0" : null) },
			{ "ShowInSelfService", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.ShowInSelfService != null ? self.ShowInSelfService.Value ? "1" : "0" : null) },
			{ "ExcludeFromSubscription", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.ExcludeFromSubscription != null ? self.ExcludeFromSubscription.Value ? "1" : "0" : null) },
			{ "IsUrgent", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.IsUrgent != null ? self.IsUrgent.Value ? "1" : "0" : null) },
			{ "PaymentSystem", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.PaymentSystem != null ? ctx.ReplacePlaceholders(self.PaymentSystem) : null) },
			{ "Currency", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Currency != null ? ctx.ReplacePlaceholders(self.Currency) : null) },
			{ "BusinessSegment", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.BusinessSegment != null ? ctx.ReplacePlaceholders(self.BusinessSegment) : null) },
			{ "Preview", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Preview != null ? self.Preview : null) },
			{ "Text", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Tariff", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Tariff != null ? ctx.ReplacePlaceholders(self.Tariff) : null) },
			{ "FileCTN", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.FileCTN != null ? ctx.ReplacePlaceholders(self.FileCTN) : null) },
			{ "TitleEngl", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "PreviewEngl", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.PreviewEngl != null ? self.PreviewEngl : null) },
			{ "TextEngl", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TitleTat", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "PreviewTat", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.PreviewTat != null ? self.PreviewTat : null) },
			{ "TextTat", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "MetaKeywords", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "Image", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileImage", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TileImage != null ? self.TileImage : null) },
			{ "TitleFormat_ID", new Func<NewsArticle, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileImageUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileImageUploadPath { get; set; }
		public Boolean ShowOnWebExact { get { return this.ShowOnWeb == null ? default(Boolean) : this.ShowOnWeb.Value; } }
		public Boolean ShowInSelfServiceExact { get { return this.ShowInSelfService == null ? default(Boolean) : this.ShowInSelfService.Value; } }
		public Boolean ExcludeFromSubscriptionExact { get { return this.ExcludeFromSubscription == null ? default(Boolean) : this.ExcludeFromSubscription.Value; } }
		public Boolean IsUrgentExact { get { return this.IsUrgent == null ? default(Boolean) : this.IsUrgent.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.PaymentSystem = context.ReplacePlaceholders(this.PaymentSystem);
			this.Currency = context.ReplacePlaceholders(this.Currency);
			this.BusinessSegment = context.ReplacePlaceholders(this.BusinessSegment);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.Tariff = context.ReplacePlaceholders(this.Tariff);
			this.FileCTN = context.ReplacePlaceholders(this.FileCTN);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.ImageUrl = context.GetUrl(this.Image, "NewsArticle", "Image");
			this.TileImageUrl = context.GetUrl(this.TileImage, "NewsArticle", "TileImage");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "NewsArticle", "Image");
			this.TileImageUploadPath = context.GetUploadPath(this.TileImage, "NewsArticle", "TileImage");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("NewsArticle", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class NotificationTemplate: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<NotificationTemplate, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<NotificationTemplate,  IQPFormService, string>>
		{
			{ "Title", new Func<NotificationTemplate, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TemplateCode", new Func<NotificationTemplate, IQPFormService, string>((self, ctx) => self.TemplateCode != null ? self.TemplateCode : null) },
			{ "Subject", new Func<NotificationTemplate, IQPFormService, string>((self, ctx) => self.Subject != null ? ctx.ReplacePlaceholders(self.Subject) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Subject = context.ReplacePlaceholders(this.Subject);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("NotificationTemplate", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RoamingTariffZone: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RoamingTariffZone, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RoamingTariffZone,  IQPFormService, string>>
		{
			{ "Title", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "DescriptionEngl", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "DescriptionTat", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "Legal", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "SortOrder", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "InterCityRegion_ID", new Func<RoamingTariffZone, IQPFormService, string>((self, ctx) => self.InterCityRegion_ID != null ? self.InterCityRegion_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RoamingTariffZone", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RoamingCountryZone: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RoamingCountryZone, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RoamingCountryZone,  IQPFormService, string>>
		{
			{ "Country_ID", new Func<RoamingCountryZone, IQPFormService, string>((self, ctx) => self.Country_ID != null ? self.Country_ID.ToString() : null) },
			{ "TariffZone_ID", new Func<RoamingCountryZone, IQPFormService, string>((self, ctx) => self.TariffZone_ID != null ? self.TariffZone_ID.ToString() : null) },
			{ "RoamingOperator_ID", new Func<RoamingCountryZone, IQPFormService, string>((self, ctx) => self.RoamingOperator_ID != null ? self.RoamingOperator_ID.ToString() : null) },
			{ "LocalRoamingOperator_ID", new Func<RoamingCountryZone, IQPFormService, string>((self, ctx) => self.LocalRoamingOperator_ID != null ? self.LocalRoamingOperator_ID.ToString() : null) },
			{ "LocalRoamingRegion_ID", new Func<RoamingCountryZone, IQPFormService, string>((self, ctx) => self.LocalRoamingRegion_ID != null ? self.LocalRoamingRegion_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 Country_IDExact { get { return this.Country_ID == null ? default(Int32) : this.Country_ID.Value; } }
		public Int32 RoamingOperator_IDExact { get { return this.RoamingOperator_ID == null ? default(Int32) : this.RoamingOperator_ID.Value; } }
		public Int32 LocalRoamingRegion_IDExact { get { return this.LocalRoamingRegion_ID == null ? default(Int32) : this.LocalRoamingRegion_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RoamingCountryZone", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class UserSubscription: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<UserSubscription, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<UserSubscription,  IQPFormService, string>>
		{
			{ "Email", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.Email != null ? ctx.ReplacePlaceholders(self.Email) : null) },
			{ "Login", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.Login != null ? ctx.ReplacePlaceholders(self.Login) : null) },
			{ "IsActive", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.IsActive != null ? self.IsActive.Value ? "1" : "0" : null) },
			{ "IsDeleted", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.IsDeleted != null ? self.IsDeleted.Value ? "1" : "0" : null) },
			{ "IsOld", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.IsOld != null ? self.IsOld.Value ? "1" : "0" : null) },
			{ "MarketRegion_ID", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.MarketRegion_ID != null ? self.MarketRegion_ID.ToString() : null) },
			{ "NewRegion_ID", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.NewRegion_ID != null ? self.NewRegion_ID.ToString() : null) },
			{ "IsHtml", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.IsHtml != null ? self.IsHtml.Value ? "1" : "0" : null) },
			{ "FailedDeliveries", new Func<UserSubscription, IQPFormService, string>((self, ctx) => self.FailedDeliveries != null ? self.FailedDeliveries.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsActiveExact { get { return this.IsActive == null ? default(Boolean) : this.IsActive.Value; } }
		public Boolean IsDeletedExact { get { return this.IsDeleted == null ? default(Boolean) : this.IsDeleted.Value; } }
		public Boolean IsOldExact { get { return this.IsOld == null ? default(Boolean) : this.IsOld.Value; } }
		public Boolean IsHtmlExact { get { return this.IsHtml == null ? default(Boolean) : this.IsHtml.Value; } }
		public Int32 FailedDeliveriesExact { get { return this.FailedDeliveries == null ? default(Int32) : this.FailedDeliveries.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Email = context.ReplacePlaceholders(this.Email);
			this.Login = context.ReplacePlaceholders(this.Login);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("UserSubscription", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SubscriptionCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SubscriptionCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SubscriptionCategory,  IQPFormService, string>>
		{
			{ "NewsCategory_ID", new Func<SubscriptionCategory, IQPFormService, string>((self, ctx) => self.NewsCategory_ID != null ? self.NewsCategory_ID.ToString() : null) },
			{ "Subscriber_ID", new Func<SubscriptionCategory, IQPFormService, string>((self, ctx) => self.Subscriber_ID != null ? self.Subscriber_ID.ToString() : null) },
			{ "IsActive", new Func<SubscriptionCategory, IQPFormService, string>((self, ctx) => self.IsActive != null ? self.IsActive.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsActiveExact { get { return this.IsActive == null ? default(Boolean) : this.IsActive.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SubscriptionCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ConfirmationRequest: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ConfirmationRequest, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ConfirmationRequest,  IQPFormService, string>>
		{
			{ "Code", new Func<ConfirmationRequest, IQPFormService, string>((self, ctx) => self.Code != null ? ctx.ReplacePlaceholders(self.Code) : null) },
			{ "Subscription_ID", new Func<ConfirmationRequest, IQPFormService, string>((self, ctx) => self.Subscription_ID != null ? self.Subscription_ID.ToString() : null) },
			{ "Action", new Func<ConfirmationRequest, IQPFormService, string>((self, ctx) => self.Action != null ? self.Action.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 ActionExact { get { return this.Action == null ? default(Int32) : this.Action.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Code = context.ReplacePlaceholders(this.Code);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ConfirmationRequest", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackTheme: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackTheme, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackTheme,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "SendToEmail", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.SendToEmail != null ? ctx.ReplacePlaceholders(self.SendToEmail) : null) },
			{ "ShowHasContract", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.ShowHasContract != null ? self.ShowHasContract.Value ? "1" : "0" : null) },
			{ "ShowLogin", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.ShowLogin != null ? self.ShowLogin.Value ? "1" : "0" : null) },
			{ "ShowBeelinePhone", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.ShowBeelinePhone != null ? self.ShowBeelinePhone.Value ? "1" : "0" : null) },
			{ "ShowAttachmentsForEmail", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.ShowAttachmentsForEmail != null ? self.ShowAttachmentsForEmail.Value ? "1" : "0" : null) },
			{ "ShowAttachmentsForCall", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.ShowAttachmentsForCall != null ? self.ShowAttachmentsForCall.Value ? "1" : "0" : null) },
			{ "FilterThemeId", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.FilterThemeId != null ? ctx.ReplacePlaceholders(self.FilterThemeId) : null) },
			{ "Order", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Source", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.Source != null ? ctx.ReplacePlaceholders(self.Source) : null) },
			{ "OnlineChatId", new Func<FeedbackTheme, IQPFormService, string>((self, ctx) => self.OnlineChatId != null ? ctx.ReplacePlaceholders(self.OnlineChatId) : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean ShowHasContractExact { get { return this.ShowHasContract == null ? default(Boolean) : this.ShowHasContract.Value; } }
		public Boolean ShowLoginExact { get { return this.ShowLogin == null ? default(Boolean) : this.ShowLogin.Value; } }
		public Boolean ShowBeelinePhoneExact { get { return this.ShowBeelinePhone == null ? default(Boolean) : this.ShowBeelinePhone.Value; } }
		public Boolean ShowAttachmentsForEmailExact { get { return this.ShowAttachmentsForEmail == null ? default(Boolean) : this.ShowAttachmentsForEmail.Value; } }
		public Boolean ShowAttachmentsForCallExact { get { return this.ShowAttachmentsForCall == null ? default(Boolean) : this.ShowAttachmentsForCall.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.SendToEmail = context.ReplacePlaceholders(this.SendToEmail);
			this.FilterThemeId = context.ReplacePlaceholders(this.FilterThemeId);
			this.Source = context.ReplacePlaceholders(this.Source);
			this.OnlineChatId = context.ReplacePlaceholders(this.OnlineChatId);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackTheme", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackType,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "FilterTypeId", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.FilterTypeId != null ? ctx.ReplacePlaceholders(self.FilterTypeId) : null) },
			{ "Order", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Text", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "SuccessTitle", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessTitle != null ? ctx.ReplacePlaceholders(self.SuccessTitle) : null) },
			{ "SuccessTitleEngl", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessTitleEngl != null ? ctx.ReplacePlaceholders(self.SuccessTitleEngl) : null) },
			{ "SuccessTitleTat", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessTitleTat != null ? ctx.ReplacePlaceholders(self.SuccessTitleTat) : null) },
			{ "SuccessText", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessText != null ? ctx.ReplacePlaceholders(self.SuccessText) : null) },
			{ "SuccessTextEngl", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessTextEngl != null ? ctx.ReplacePlaceholders(self.SuccessTextEngl) : null) },
			{ "SuccessTextTat", new Func<FeedbackType, IQPFormService, string>((self, ctx) => self.SuccessTextTat != null ? ctx.ReplacePlaceholders(self.SuccessTextTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.FilterTypeId = context.ReplacePlaceholders(this.FilterTypeId);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.SuccessTitle = context.ReplacePlaceholders(this.SuccessTitle);
			this.SuccessTitleEngl = context.ReplacePlaceholders(this.SuccessTitleEngl);
			this.SuccessTitleTat = context.ReplacePlaceholders(this.SuccessTitleTat);
			this.SuccessText = context.ReplacePlaceholders(this.SuccessText);
			this.SuccessTextEngl = context.ReplacePlaceholders(this.SuccessTextEngl);
			this.SuccessTextTat = context.ReplacePlaceholders(this.SuccessTextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackSubtheme: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackSubtheme, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackSubtheme,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "FeedbackType_ID", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.FeedbackType_ID != null ? self.FeedbackType_ID.ToString() : null) },
			{ "Theme_ID", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.Theme_ID != null ? self.Theme_ID.ToString() : null) },
			{ "FeedbackSubthemeGroup_ID", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.FeedbackSubthemeGroup_ID != null ? self.FeedbackSubthemeGroup_ID.ToString() : null) },
			{ "ContactType", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.ContactType != null ? ctx.ReplacePlaceholders(self.ContactType) : null) },
			{ "Order", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "TitleEngl", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackSubtheme, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.ContactType = context.ReplacePlaceholders(this.ContactType);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackSubtheme", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackQueue: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackQueue, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackQueue,  IQPFormService, string>>
		{
			{ "SourceID", new Func<FeedbackQueue, IQPFormService, string>((self, ctx) => self.SourceID != null ? ctx.ReplacePlaceholders(self.SourceID) : null) },
			{ "Theme_ID", new Func<FeedbackQueue, IQPFormService, string>((self, ctx) => self.Theme_ID != null ? self.Theme_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.SourceID = context.ReplacePlaceholders(this.SourceID);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackQueue", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVChannel: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVChannel, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVChannel,  IQPFormService, string>>
		{
			{ "Title", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TopOrder", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.TopOrder != null ? self.TopOrder.ToString() : null) },
			{ "IsOnline", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.IsOnline != null ? self.IsOnline.Value ? "1" : "0" : null) },
			{ "OnlineId", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.OnlineId != null ? ctx.ReplacePlaceholders(self.OnlineId) : null) },
			{ "LogoImage", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.LogoImage != null ? self.LogoImage : null) },
			{ "GrayLogo", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.GrayLogo != null ? self.GrayLogo : null) },
			{ "GrayLogoSmall", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.GrayLogoSmall != null ? self.GrayLogoSmall : null) },
			{ "SmallLogo", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.SmallLogo != null ? self.SmallLogo : null) },
			{ "TinyLogo", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.TinyLogo != null ? self.TinyLogo : null) },
			{ "MinAge", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.MinAge != null ? self.MinAge.ToString() : null) },
			{ "Legal", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "TitleEngl", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionEngl", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "DescriptionTat", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "LegalEngl", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "VideoPreviewImage", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.VideoPreviewImage != null ? self.VideoPreviewImage : null) },
			{ "PromoVideo", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.PromoVideo != null ? self.PromoVideo : null) },
			{ "Alias", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Languages", new Func<TVChannel, IQPFormService, string>((self, ctx) => self.Languages != null ? ctx.ReplacePlaceholders(self.Languages) : null) },
		};

		#endregion
		#region Genarated properties
		public string LogoImageUrl { get; set; }
		public string GrayLogoUrl { get; set; }
		public string GrayLogoSmallUrl { get; set; }
		public string SmallLogoUrl { get; set; }
		public string TinyLogoUrl { get; set; }
		public string VideoPreviewImageUrl { get; set; }
		public string PromoVideoUrl { get; set; }
		public string LogoImageUploadPath { get; set; }
		public string GrayLogoUploadPath { get; set; }
		public string GrayLogoSmallUploadPath { get; set; }
		public string VideoPreviewImageUploadPath { get; set; }
		public string PromoVideoUploadPath { get; set; }
		public Int32 TopOrderExact { get { return this.TopOrder == null ? default(Int32) : this.TopOrder.Value; } }
		public Boolean IsOnlineExact { get { return this.IsOnline == null ? default(Boolean) : this.IsOnline.Value; } }
		public Int32 MinAgeExact { get { return this.MinAge == null ? default(Int32) : this.MinAge.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.OnlineId = context.ReplacePlaceholders(this.OnlineId);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.Languages = context.ReplacePlaceholders(this.Languages);
			this.LogoImageUrl = context.GetUrl(this.LogoImage, "TVChannel", "LogoImage");
			this.GrayLogoUrl = context.GetUrl(this.GrayLogo, "TVChannel", "GrayLogo");
			this.GrayLogoSmallUrl = context.GetUrl(this.GrayLogoSmall, "TVChannel", "GrayLogoSmall");
			this.SmallLogoUrl = context.GetUrl(this.SmallLogo, "TVChannel", "SmallLogo");
			this.TinyLogoUrl = context.GetUrl(this.TinyLogo, "TVChannel", "TinyLogo");
			this.VideoPreviewImageUrl = context.GetUrl(this.VideoPreviewImage, "TVChannel", "VideoPreviewImage");
			this.PromoVideoUrl = context.GetUrl(this.PromoVideo, "TVChannel", "PromoVideo");
			this.LogoImageUploadPath = context.GetUploadPath(this.LogoImage, "TVChannel", "LogoImage");
			this.GrayLogoUploadPath = context.GetUploadPath(this.GrayLogo, "TVChannel", "GrayLogo");
			this.GrayLogoSmallUploadPath = context.GetUploadPath(this.GrayLogoSmall, "TVChannel", "GrayLogoSmall");
			this.VideoPreviewImageUploadPath = context.GetUploadPath(this.VideoPreviewImage, "TVChannel", "VideoPreviewImage");
			this.PromoVideoUploadPath = context.GetUploadPath(this.PromoVideo, "TVChannel", "PromoVideo");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVChannel", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RegionFeedbackGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RegionFeedbackGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RegionFeedbackGroup,  IQPFormService, string>>
		{
			{ "Code", new Func<RegionFeedbackGroup, IQPFormService, string>((self, ctx) => self.Code != null ? ctx.ReplacePlaceholders(self.Code) : null) },
			{ "FeedbackType_ID", new Func<RegionFeedbackGroup, IQPFormService, string>((self, ctx) => self.FeedbackType_ID != null ? self.FeedbackType_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Code = context.ReplacePlaceholders(this.Code);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RegionFeedbackGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class DeviceType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<DeviceType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<DeviceType,  IQPFormService, string>>
		{
			{ "Title", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Image", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "SortOrder", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "IconForTariff", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.IconForTariff != null ? self.IconForTariff : null) },
			{ "TitleForIcon", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.TitleForIcon != null ? ctx.ReplacePlaceholders(self.TitleForIcon) : null) },
			{ "TitleForIconEngl", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.TitleForIconEngl != null ? ctx.ReplacePlaceholders(self.TitleForIconEngl) : null) },
			{ "TitleForIconTat", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.TitleForIconTat != null ? ctx.ReplacePlaceholders(self.TitleForIconTat) : null) },
			{ "DefaultTariffTileIcon", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.DefaultTariffTileIcon != null ? self.DefaultTariffTileIcon : null) },
			{ "DefaultServiceTileIcon", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.DefaultServiceTileIcon != null ? self.DefaultServiceTileIcon : null) },
			{ "Alias", new Func<DeviceType, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string IconForTariffUrl { get; set; }
		public string DefaultTariffTileIconUrl { get; set; }
		public string DefaultServiceTileIconUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string IconForTariffUploadPath { get; set; }
		public string DefaultTariffTileIconUploadPath { get; set; }
		public string DefaultServiceTileIconUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleForIcon = context.ReplacePlaceholders(this.TitleForIcon);
			this.TitleForIconEngl = context.ReplacePlaceholders(this.TitleForIconEngl);
			this.TitleForIconTat = context.ReplacePlaceholders(this.TitleForIconTat);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.ImageUrl = context.GetUrl(this.Image, "DeviceType", "Image");
			this.IconForTariffUrl = context.GetUrl(this.IconForTariff, "DeviceType", "IconForTariff");
			this.DefaultTariffTileIconUrl = context.GetUrl(this.DefaultTariffTileIcon, "DeviceType", "DefaultTariffTileIcon");
			this.DefaultServiceTileIconUrl = context.GetUrl(this.DefaultServiceTileIcon, "DeviceType", "DefaultServiceTileIcon");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "DeviceType", "Image");
			this.IconForTariffUploadPath = context.GetUploadPath(this.IconForTariff, "DeviceType", "IconForTariff");
			this.DefaultTariffTileIconUploadPath = context.GetUploadPath(this.DefaultTariffTileIcon, "DeviceType", "DefaultTariffTileIcon");
			this.DefaultServiceTileIconUploadPath = context.GetUploadPath(this.DefaultServiceTileIcon, "DeviceType", "DefaultServiceTileIcon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("DeviceType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Action: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Action, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Action,  IQPFormService, string>>
		{
			{ "Title", new Func<Action, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<Action, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Priority", new Func<Action, IQPFormService, string>((self, ctx) => self.Priority != null ? self.Priority.ToString() : null) },
			{ "StartDate", new Func<Action, IQPFormService, string>((self, ctx) => self.StartDate != null ? self.StartDate.ToString() : null) },
			{ "EndDate", new Func<Action, IQPFormService, string>((self, ctx) => self.EndDate != null ? self.EndDate.ToString() : null) },
			{ "SpecialConditions", new Func<Action, IQPFormService, string>((self, ctx) => self.SpecialConditions != null ? ctx.ReplacePlaceholders(self.SpecialConditions) : null) },
			{ "Preview", new Func<Action, IQPFormService, string>((self, ctx) => self.Preview != null ? self.Preview : null) },
			{ "Text", new Func<Action, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "ProductLinks", new Func<Action, IQPFormService, string>((self, ctx) => self.ProductLinks != null ? ctx.ReplacePlaceholders(self.ProductLinks) : null) },
			{ "IsArchive", new Func<Action, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "MetaKeywords", new Func<Action, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<Action, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "TileType", new Func<Action, IQPFormService, string>((self, ctx) => self.TileType != null ? ctx.ReplacePlaceholders(self.TileType) : null) },
			{ "Image", new Func<Action, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileImage", new Func<Action, IQPFormService, string>((self, ctx) => self.TileImage != null ? self.TileImage : null) },
			{ "TitleFormat_ID", new Func<Action, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "TitleEngl", new Func<Action, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "PreviewEngl", new Func<Action, IQPFormService, string>((self, ctx) => self.PreviewEngl != null ? self.PreviewEngl : null) },
			{ "TextEngl", new Func<Action, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TitleTat", new Func<Action, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "PreviewTat", new Func<Action, IQPFormService, string>((self, ctx) => self.PreviewTat != null ? self.PreviewTat : null) },
			{ "TextTat", new Func<Action, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "SpecialConditionsEngl", new Func<Action, IQPFormService, string>((self, ctx) => self.SpecialConditionsEngl != null ? ctx.ReplacePlaceholders(self.SpecialConditionsEngl) : null) },
			{ "SpecialConditionsTat", new Func<Action, IQPFormService, string>((self, ctx) => self.SpecialConditionsTat != null ? ctx.ReplacePlaceholders(self.SpecialConditionsTat) : null) },
			{ "ProductLinksEngl", new Func<Action, IQPFormService, string>((self, ctx) => self.ProductLinksEngl != null ? ctx.ReplacePlaceholders(self.ProductLinksEngl) : null) },
			{ "ProductLinksTat", new Func<Action, IQPFormService, string>((self, ctx) => self.ProductLinksTat != null ? ctx.ReplacePlaceholders(self.ProductLinksTat) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileImageUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileImageUploadPath { get; set; }
		public Int32 PriorityExact { get { return this.Priority == null ? default(Int32) : this.Priority.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.SpecialConditions = context.ReplacePlaceholders(this.SpecialConditions);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.ProductLinks = context.ReplacePlaceholders(this.ProductLinks);
			this.TileType = context.ReplacePlaceholders(this.TileType);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.SpecialConditionsEngl = context.ReplacePlaceholders(this.SpecialConditionsEngl);
			this.SpecialConditionsTat = context.ReplacePlaceholders(this.SpecialConditionsTat);
			this.ProductLinksEngl = context.ReplacePlaceholders(this.ProductLinksEngl);
			this.ProductLinksTat = context.ReplacePlaceholders(this.ProductLinksTat);
			this.ImageUrl = context.GetUrl(this.Image, "Action", "Image");
			this.TileImageUrl = context.GetUrl(this.TileImage, "Action", "TileImage");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "Action", "Image");
			this.TileImageUploadPath = context.GetUploadPath(this.TileImage, "Action", "TileImage");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Action", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVPackage: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVPackage, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVPackage,  IQPFormService, string>>
		{
			{ "INAC", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.INAC != null ? ctx.ReplacePlaceholders(self.INAC) : null) },
			{ "MarketingPackage_ID", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.MarketingPackage_ID != null ? self.MarketingPackage_ID.ToString() : null) },
			{ "Benefit", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Price", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "SubscriptionFee", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.SubscriptionFee != null ? self.SubscriptionFee.ToString() : null) },
			{ "SubscriptionFeeType_ID", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.SubscriptionFeeType_ID != null ? self.SubscriptionFeeType_ID.ToString() : null) },
			{ "SortOrder", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "PDF", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.PDF != null ? self.PDF : null) },
			{ "PDFEngl", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.PDFEngl != null ? self.PDFEngl : null) },
			{ "PDFTat", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.PDFTat != null ? self.PDFTat : null) },
			{ "TransferPrice", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.TransferPrice != null ? self.TransferPrice.ToString() : null) },
			{ "IsArchive", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "FamilyIcon", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "DiscountCondition", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.DiscountCondition != null ? ctx.ReplacePlaceholders(self.DiscountCondition) : null) },
			{ "MinPackagePayment", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.MinPackagePayment != null ? self.MinPackagePayment.ToString() : null) },
			{ "MinTotalPackages", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.MinTotalPackages != null ? self.MinTotalPackages.ToString() : null) },
			{ "EmptyPaymentReplacement", new Func<TVPackage, IQPFormService, string>((self, ctx) => self.EmptyPaymentReplacement != null ? ctx.ReplacePlaceholders(self.EmptyPaymentReplacement) : null) },
		};

		#endregion
		#region Genarated properties
		public string PDFUrl { get; set; }
		public string PDFEnglUrl { get; set; }
		public string PDFTatUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string PDFUploadPath { get; set; }
		public string PDFEnglUploadPath { get; set; }
		public string PDFTatUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Double PriceExact { get { return this.Price == null ? default(Double) : this.Price.Value; } }
		public Double SubscriptionFeeExact { get { return this.SubscriptionFee == null ? default(Double) : this.SubscriptionFee.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Double TransferPriceExact { get { return this.TransferPrice == null ? default(Double) : this.TransferPrice.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Double MinPackagePaymentExact { get { return this.MinPackagePayment == null ? default(Double) : this.MinPackagePayment.Value; } }
		public Int32 MinTotalPackagesExact { get { return this.MinTotalPackages == null ? default(Int32) : this.MinTotalPackages.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.INAC = context.ReplacePlaceholders(this.INAC);
			this.DiscountCondition = context.ReplacePlaceholders(this.DiscountCondition);
			this.EmptyPaymentReplacement = context.ReplacePlaceholders(this.EmptyPaymentReplacement);
			this.PDFUrl = context.GetUrl(this.PDF, "TVPackage", "PDF");
			this.PDFEnglUrl = context.GetUrl(this.PDFEngl, "TVPackage", "PDFEngl");
			this.PDFTatUrl = context.GetUrl(this.PDFTat, "TVPackage", "PDFTat");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "TVPackage", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "TVPackage", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "TVPackage", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "TVPackage", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "TVPackage", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "TVPackage", "FamilyIconHoverTat");
			this.PDFUploadPath = context.GetUploadPath(this.PDF, "TVPackage", "PDF");
			this.PDFEnglUploadPath = context.GetUploadPath(this.PDFEngl, "TVPackage", "PDFEngl");
			this.PDFTatUploadPath = context.GetUploadPath(this.PDFTat, "TVPackage", "PDFTat");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "TVPackage", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "TVPackage", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "TVPackage", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "TVPackage", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "TVPackage", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "TVPackage", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVPackage", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ExternalRegionMapping: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ExternalRegionMapping, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ExternalRegionMapping,  IQPFormService, string>>
		{
			{ "ExternalSystem_ID", new Func<ExternalRegionMapping, IQPFormService, string>((self, ctx) => self.ExternalSystem_ID != null ? self.ExternalSystem_ID.ToString() : null) },
			{ "RegionCode", new Func<ExternalRegionMapping, IQPFormService, string>((self, ctx) => self.RegionCode != null ? ctx.ReplacePlaceholders(self.RegionCode) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.RegionCode = context.ReplacePlaceholders(this.RegionCode);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ExternalRegionMapping", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ExternalRegionSystem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ExternalRegionSystem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ExternalRegionSystem,  IQPFormService, string>>
		{
			{ "Title", new Func<ExternalRegionSystem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ExternalRegionSystem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SiteSetting: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SiteSetting, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteSetting,  IQPFormService, string>>
		{
			{ "Title", new Func<SiteSetting, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TextValue", new Func<SiteSetting, IQPFormService, string>((self, ctx) => self.TextValue != null ? self.TextValue : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteSetting", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneCode: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneCode, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneCode,  IQPFormService, string>>
		{
			{ "Code", new Func<PhoneCode, IQPFormService, string>((self, ctx) => self.Code != null ? self.Code.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 CodeExact { get { return this.Code == null ? default(Int32) : this.Code.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneCode", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QPItemDefinitionConstraint: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QPItemDefinitionConstraint, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPItemDefinitionConstraint,  IQPFormService, string>>
		{
			{ "Source_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Source_ID != null ? self.Source_ID.ToString() : null) },
			{ "Target_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Target_ID != null ? self.Target_ID.ToString() : null) },
			{ "Title", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPItemDefinitionConstraint", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingMobileTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingMobileTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingMobileTariff,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "HtmlTitle", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.HtmlTitle != null ? ctx.ReplacePlaceholders(self.HtmlTitle) : null) },
			{ "TitleEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "HtmlTitleEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.HtmlTitleEngl != null ? ctx.ReplacePlaceholders(self.HtmlTitleEngl) : null) },
			{ "TitleTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "HtmlTitleTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.HtmlTitleTat != null ? ctx.ReplacePlaceholders(self.HtmlTitleTat) : null) },
			{ "Image", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "PaymentSystem", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.PaymentSystem != null ? ctx.ReplacePlaceholders(self.PaymentSystem) : null) },
			{ "OtherPaymentSystemTariff_ID", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.OtherPaymentSystemTariff_ID != null ? self.OtherPaymentSystemTariff_ID.ToString() : null) },
			{ "TariffFamily_ID", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TariffFamily_ID != null ? self.TariffFamily_ID.ToString() : null) },
			{ "Legal", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Icon", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "FamilyIcon", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconHover", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "Benefit", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Purpose", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "B2C", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.B2C != null ? self.B2C.Value ? "1" : "0" : null) },
			{ "B2B", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.B2B != null ? self.B2B.Value ? "1" : "0" : null) },
			{ "TitleFormat_ID", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MetaKeywords", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "TitleForFamily", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleForFamily != null ? ctx.ReplacePlaceholders(self.TitleForFamily) : null) },
			{ "TitleForFamilyEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleForFamilyEngl != null ? ctx.ReplacePlaceholders(self.TitleForFamilyEngl) : null) },
			{ "TitleForFamilyTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.TitleForFamilyTat != null ? ctx.ReplacePlaceholders(self.TitleForFamilyTat) : null) },
			{ "CommentForFamily", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.CommentForFamily != null ? ctx.ReplacePlaceholders(self.CommentForFamily) : null) },
			{ "CommentForFamilyTat", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.CommentForFamilyTat != null ? ctx.ReplacePlaceholders(self.CommentForFamilyTat) : null) },
			{ "CommentForFamilyEngl", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.CommentForFamilyEngl != null ? ctx.ReplacePlaceholders(self.CommentForFamilyEngl) : null) },
			{ "IsStandardInterCityTariff", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.IsStandardInterCityTariff != null ? self.IsStandardInterCityTariff.Value ? "1" : "0" : null) },
			{ "MNP", new Func<MarketingMobileTariff, IQPFormService, string>((self, ctx) => self.MNP != null ? self.MNP.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string IconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string IconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public Boolean B2CExact { get { return this.B2C == null ? default(Boolean) : this.B2C.Value; } }
		public Boolean B2BExact { get { return this.B2B == null ? default(Boolean) : this.B2B.Value; } }
		public Boolean IsStandardInterCityTariffExact { get { return this.IsStandardInterCityTariff == null ? default(Boolean) : this.IsStandardInterCityTariff.Value; } }
		public Boolean MNPExact { get { return this.MNP == null ? default(Boolean) : this.MNP.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.HtmlTitle = context.ReplacePlaceholders(this.HtmlTitle);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.HtmlTitleEngl = context.ReplacePlaceholders(this.HtmlTitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.HtmlTitleTat = context.ReplacePlaceholders(this.HtmlTitleTat);
			this.PaymentSystem = context.ReplacePlaceholders(this.PaymentSystem);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.TitleForFamily = context.ReplacePlaceholders(this.TitleForFamily);
			this.TitleForFamilyEngl = context.ReplacePlaceholders(this.TitleForFamilyEngl);
			this.TitleForFamilyTat = context.ReplacePlaceholders(this.TitleForFamilyTat);
			this.CommentForFamily = context.ReplacePlaceholders(this.CommentForFamily);
			this.CommentForFamilyTat = context.ReplacePlaceholders(this.CommentForFamilyTat);
			this.CommentForFamilyEngl = context.ReplacePlaceholders(this.CommentForFamilyEngl);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingMobileTariff", "Image");
			this.IconUrl = context.GetUrl(this.Icon, "MarketingMobileTariff", "Icon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingMobileTariff", "FamilyIcon");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingMobileTariff", "FamilyIconTat");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingMobileTariff", "FamilyIconEngl");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingMobileTariff", "FamilyIconHover");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingMobileTariff", "FamilyIconHoverTat");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingMobileTariff", "FamilyIconHoverEngl");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingMobileTariff", "Image");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "MarketingMobileTariff", "Icon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingMobileTariff", "FamilyIcon");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingMobileTariff", "FamilyIconTat");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingMobileTariff", "FamilyIconEngl");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingMobileTariff", "FamilyIconHover");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingMobileTariff", "FamilyIconHoverTat");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingMobileTariff", "FamilyIconHoverEngl");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingMobileTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TariffGuideQuestion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TariffGuideQuestion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TariffGuideQuestion,  IQPFormService, string>>
		{
			{ "Text", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "SortOrder", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "B2C", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.B2C != null ? self.B2C.Value ? "1" : "0" : null) },
			{ "B2B", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.B2B != null ? self.B2B.Value ? "1" : "0" : null) },
			{ "ParentAnswer_ID", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.ParentAnswer_ID != null ? self.ParentAnswer_ID.ToString() : null) },
			{ "ControlType", new Func<TariffGuideQuestion, IQPFormService, string>((self, ctx) => self.ControlType != null ? ctx.ReplacePlaceholders(self.ControlType) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean B2CExact { get { return this.B2C == null ? default(Boolean) : this.B2C.Value; } }
		public Boolean B2BExact { get { return this.B2B == null ? default(Boolean) : this.B2B.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.ControlType = context.ReplacePlaceholders(this.ControlType);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TariffGuideQuestion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TariffGuideAnswer: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TariffGuideAnswer, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TariffGuideAnswer,  IQPFormService, string>>
		{
			{ "Text", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "Question_ID", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.Question_ID != null ? self.Question_ID.ToString() : null) },
			{ "SortOrder", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "IsDefault", new Func<TariffGuideAnswer, IQPFormService, string>((self, ctx) => self.IsDefault != null ? self.IsDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean IsDefaultExact { get { return this.IsDefault == null ? default(Boolean) : this.IsDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TariffGuideAnswer", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TariffGuideResult: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TariffGuideResult, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TariffGuideResult,  IQPFormService, string>>
		{
			{ "MarketingSegment", new Func<TariffGuideResult, IQPFormService, string>((self, ctx) => self.MarketingSegment != null ? ctx.ReplacePlaceholders(self.MarketingSegment) : null) },
			{ "DeviceType_ID", new Func<TariffGuideResult, IQPFormService, string>((self, ctx) => self.DeviceType_ID != null ? self.DeviceType_ID.ToString() : null) },
			{ "Answers", new Func<TariffGuideResult, IQPFormService, string>((self, ctx) => self.Answers != null ? ctx.ReplacePlaceholders(self.Answers) : null) },
			{ "Tariffs", new Func<TariffGuideResult, IQPFormService, string>((self, ctx) => self.Tariffs != null ? ctx.ReplacePlaceholders(self.Tariffs) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.MarketingSegment = context.ReplacePlaceholders(this.MarketingSegment);
			this.Answers = context.ReplacePlaceholders(this.Answers);
			this.Tariffs = context.ReplacePlaceholders(this.Tariffs);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TariffGuideResult", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileTariffParameterGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileTariffParameterGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileTariffParameterGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "SortOrder", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Icon", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "IsComparable", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.IsComparable != null ? self.IsComparable.Value ? "1" : "0" : null) },
			{ "Legal", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "TitleDative", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleDative != null ? ctx.ReplacePlaceholders(self.TitleDative) : null) },
			{ "TitleDativeEngl", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleDativeEngl != null ? ctx.ReplacePlaceholders(self.TitleDativeEngl) : null) },
			{ "TitleDativeTat", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleDativeTat != null ? ctx.ReplacePlaceholders(self.TitleDativeTat) : null) },
			{ "GroupType", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.GroupType != null ? ctx.ReplacePlaceholders(self.GroupType) : null) },
			{ "PreOpen", new Func<MobileTariffParameterGroup, IQPFormService, string>((self, ctx) => self.PreOpen != null ? self.PreOpen.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean IsComparableExact { get { return this.IsComparable == null ? default(Boolean) : this.IsComparable.Value; } }
		public Boolean PreOpenExact { get { return this.PreOpen == null ? default(Boolean) : this.PreOpen.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleDative = context.ReplacePlaceholders(this.TitleDative);
			this.TitleDativeEngl = context.ReplacePlaceholders(this.TitleDativeEngl);
			this.TitleDativeTat = context.ReplacePlaceholders(this.TitleDativeTat);
			this.GroupType = context.ReplacePlaceholders(this.GroupType);
			this.IconUrl = context.GetUrl(this.Icon, "MobileTariffParameterGroup", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "MobileTariffParameterGroup", "Icon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileTariffParameterGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingSign: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingSign, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingSign,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingSign, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<MarketingSign, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingSign, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingSign", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingMobileService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingMobileService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingMobileService,  IQPFormService, string>>
		{
			{ "HtmlTitle", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.HtmlTitle != null ? ctx.ReplacePlaceholders(self.HtmlTitle) : null) },
			{ "Title", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "ServiceFamily_ID", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.ServiceFamily_ID != null ? self.ServiceFamily_ID.ToString() : null) },
			{ "TitleEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "HtmlTitleEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.HtmlTitleEngl != null ? ctx.ReplacePlaceholders(self.HtmlTitleEngl) : null) },
			{ "TitleTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "HtmlTitleTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.HtmlTitleTat != null ? ctx.ReplacePlaceholders(self.HtmlTitleTat) : null) },
			{ "Benefit", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "B2C", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.B2C != null ? self.B2C.Value ? "1" : "0" : null) },
			{ "B2B", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.B2B != null ? self.B2B.Value ? "1" : "0" : null) },
			{ "Image", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "Icon", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "FamilyIcon", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "Purpose", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "Widget", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Widget != null ? ctx.ReplacePlaceholders(self.Widget) : null) },
			{ "TariffOption", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TariffOption != null ? self.TariffOption.Value ? "1" : "0" : null) },
			{ "TitleForFamily", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleForFamily != null ? ctx.ReplacePlaceholders(self.TitleForFamily) : null) },
			{ "TitleForFamilyEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleForFamilyEngl != null ? ctx.ReplacePlaceholders(self.TitleForFamilyEngl) : null) },
			{ "TitleForFamilyTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleForFamilyTat != null ? ctx.ReplacePlaceholders(self.TitleForFamilyTat) : null) },
			{ "TitleFormat_ID", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MetaKeywords", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "CallCenterPrice", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.CallCenterPrice != null ? self.CallCenterPrice.ToString() : null) },
			{ "ArchiveTariffs", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.ArchiveTariffs != null ? ctx.ReplacePlaceholders(self.ArchiveTariffs) : null) },
			{ "ArchiveTariffsEng", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.ArchiveTariffsEng != null ? ctx.ReplacePlaceholders(self.ArchiveTariffsEng) : null) },
			{ "ArchiveTariffsTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.ArchiveTariffsTat != null ? ctx.ReplacePlaceholders(self.ArchiveTariffsTat) : null) },
			{ "CommentForFamily", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.CommentForFamily != null ? ctx.ReplacePlaceholders(self.CommentForFamily) : null) },
			{ "CommentForFamilyEngl", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.CommentForFamilyEngl != null ? ctx.ReplacePlaceholders(self.CommentForFamilyEngl) : null) },
			{ "CommentForFamilyTat", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.CommentForFamilyTat != null ? ctx.ReplacePlaceholders(self.CommentForFamilyTat) : null) },
			{ "ShowPriceInsteadFee", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.ShowPriceInsteadFee != null ? self.ShowPriceInsteadFee.Value ? "1" : "0" : null) },
			{ "Prefix_ID", new Func<MarketingMobileService, IQPFormService, string>((self, ctx) => self.Prefix_ID != null ? self.Prefix_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string IconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string IconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public Boolean B2CExact { get { return this.B2C == null ? default(Boolean) : this.B2C.Value; } }
		public Boolean B2BExact { get { return this.B2B == null ? default(Boolean) : this.B2B.Value; } }
		public Boolean TariffOptionExact { get { return this.TariffOption == null ? default(Boolean) : this.TariffOption.Value; } }
		public Double CallCenterPriceExact { get { return this.CallCenterPrice == null ? default(Double) : this.CallCenterPrice.Value; } }
		public Boolean ShowPriceInsteadFeeExact { get { return this.ShowPriceInsteadFee == null ? default(Boolean) : this.ShowPriceInsteadFee.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.HtmlTitle = context.ReplacePlaceholders(this.HtmlTitle);
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.HtmlTitleEngl = context.ReplacePlaceholders(this.HtmlTitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.HtmlTitleTat = context.ReplacePlaceholders(this.HtmlTitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.Widget = context.ReplacePlaceholders(this.Widget);
			this.TitleForFamily = context.ReplacePlaceholders(this.TitleForFamily);
			this.TitleForFamilyEngl = context.ReplacePlaceholders(this.TitleForFamilyEngl);
			this.TitleForFamilyTat = context.ReplacePlaceholders(this.TitleForFamilyTat);
			this.ArchiveTariffs = context.ReplacePlaceholders(this.ArchiveTariffs);
			this.ArchiveTariffsEng = context.ReplacePlaceholders(this.ArchiveTariffsEng);
			this.ArchiveTariffsTat = context.ReplacePlaceholders(this.ArchiveTariffsTat);
			this.CommentForFamily = context.ReplacePlaceholders(this.CommentForFamily);
			this.CommentForFamilyEngl = context.ReplacePlaceholders(this.CommentForFamilyEngl);
			this.CommentForFamilyTat = context.ReplacePlaceholders(this.CommentForFamilyTat);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingMobileService", "Image");
			this.IconUrl = context.GetUrl(this.Icon, "MarketingMobileService", "Icon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingMobileService", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingMobileService", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingMobileService", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingMobileService", "FamilyIconHover");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingMobileService", "FamilyIconHoverTat");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingMobileService", "FamilyIconHoverEngl");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingMobileService", "Image");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "MarketingMobileService", "Icon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingMobileService", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingMobileService", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingMobileService", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingMobileService", "FamilyIconHover");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingMobileService", "FamilyIconHoverTat");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingMobileService", "FamilyIconHoverEngl");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingMobileService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SubscriptionFeeType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SubscriptionFeeType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SubscriptionFeeType,  IQPFormService, string>>
		{
			{ "Title", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "TextForCheck", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForCheck != null ? ctx.ReplacePlaceholders(self.TextForCheck) : null) },
			{ "TextForCheckEngl", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForCheckEngl != null ? ctx.ReplacePlaceholders(self.TextForCheckEngl) : null) },
			{ "TextForCheckTat", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForCheckTat != null ? ctx.ReplacePlaceholders(self.TextForCheckTat) : null) },
			{ "TextForBasket", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForBasket != null ? ctx.ReplacePlaceholders(self.TextForBasket) : null) },
			{ "TextForBasketEngl", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForBasketEngl != null ? ctx.ReplacePlaceholders(self.TextForBasketEngl) : null) },
			{ "TextForBasketTat", new Func<SubscriptionFeeType, IQPFormService, string>((self, ctx) => self.TextForBasketTat != null ? ctx.ReplacePlaceholders(self.TextForBasketTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TextForCheck = context.ReplacePlaceholders(this.TextForCheck);
			this.TextForCheckEngl = context.ReplacePlaceholders(this.TextForCheckEngl);
			this.TextForCheckTat = context.ReplacePlaceholders(this.TextForCheckTat);
			this.TextForBasket = context.ReplacePlaceholders(this.TextForBasket);
			this.TextForBasketEngl = context.ReplacePlaceholders(this.TextForBasketEngl);
			this.TextForBasketTat = context.ReplacePlaceholders(this.TextForBasketTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SubscriptionFeeType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileServiceParameterGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileServiceParameterGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileServiceParameterGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SortOrder", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "TitleEngl", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Legal", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "GroupType", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.GroupType != null ? ctx.ReplacePlaceholders(self.GroupType) : null) },
			{ "PreOpen", new Func<MobileServiceParameterGroup, IQPFormService, string>((self, ctx) => self.PreOpen != null ? self.PreOpen.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean PreOpenExact { get { return this.PreOpen == null ? default(Boolean) : this.PreOpen.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.GroupType = context.ReplacePlaceholders(this.GroupType);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileServiceParameterGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileTariffFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileTariffFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileTariffFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "Signature", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.Signature != null ? ctx.ReplacePlaceholders(self.Signature) : null) },
			{ "SignatureEngl", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.SignatureEngl != null ? ctx.ReplacePlaceholders(self.SignatureEngl) : null) },
			{ "SignatureTat", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.SignatureTat != null ? ctx.ReplacePlaceholders(self.SignatureTat) : null) },
			{ "TitleForTile", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<MobileTariffFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Signature = context.ReplacePlaceholders(this.Signature);
			this.SignatureEngl = context.ReplacePlaceholders(this.SignatureEngl);
			this.SignatureTat = context.ReplacePlaceholders(this.SignatureTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileTariffFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MutualMobileServiceGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MutualMobileServiceGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MutualMobileServiceGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<MutualMobileServiceGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MutualMobileServiceGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileServiceFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileServiceFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileServiceFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "Subtitle", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.Subtitle != null ? ctx.ReplacePlaceholders(self.Subtitle) : null) },
			{ "SubtitleEngl", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.SubtitleEngl != null ? ctx.ReplacePlaceholders(self.SubtitleEngl) : null) },
			{ "SubtitleTat", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.SubtitleTat != null ? ctx.ReplacePlaceholders(self.SubtitleTat) : null) },
			{ "TitleForTile", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<MobileServiceFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Subtitle = context.ReplacePlaceholders(this.Subtitle);
			this.SubtitleEngl = context.ReplacePlaceholders(this.SubtitleEngl);
			this.SubtitleTat = context.ReplacePlaceholders(this.SubtitleTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileServiceFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileTariffCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileTariffCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileTariffCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "SortOrder", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "IsMarked", new Func<MobileTariffCategory, IQPFormService, string>((self, ctx) => self.IsMarked != null ? self.IsMarked.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean IsMarkedExact { get { return this.IsMarked == null ? default(Boolean) : this.IsMarked.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileTariffCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileServiceCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileServiceCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileServiceCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "SortOrder", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "IsMarked", new Func<MobileServiceCategory, IQPFormService, string>((self, ctx) => self.IsMarked != null ? self.IsMarked.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean IsMarkedExact { get { return this.IsMarked == null ? default(Boolean) : this.IsMarked.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileServiceCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveTariff,  IQPFormService, string>>
		{
			{ "Title", new Func<ArchiveTariff, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Region_ID", new Func<ArchiveTariff, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
			{ "SOC", new Func<ArchiveTariff, IQPFormService, string>((self, ctx) => self.SOC != null ? ctx.ReplacePlaceholders(self.SOC) : null) },
			{ "Notes", new Func<ArchiveTariff, IQPFormService, string>((self, ctx) => self.Notes != null ? ctx.ReplacePlaceholders(self.Notes) : null) },
			{ "Product_ID", new Func<ArchiveTariff, IQPFormService, string>((self, ctx) => self.Product_ID != null ? self.Product_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.SOC = context.ReplacePlaceholders(this.SOC);
			this.Notes = context.ReplacePlaceholders(this.Notes);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveTariffTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveTariffTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveTariffTab,  IQPFormService, string>>
		{
			{ "Title", new Func<ArchiveTariffTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<ArchiveTariffTab, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Tariff_ID", new Func<ArchiveTariffTab, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "SortOrder", new Func<ArchiveTariffTab, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Description = context.ReplacePlaceholders(this.Description);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveTariffTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileServiceTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileServiceTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileServiceTab,  IQPFormService, string>>
		{
			{ "Title", new Func<MobileServiceTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SortOrder", new Func<MobileServiceTab, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "TitleEngl", new Func<MobileServiceTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MobileServiceTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileServiceTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MobileParamsGroupTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MobileParamsGroupTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MobileParamsGroupTab,  IQPFormService, string>>
		{
			{ "Tab_ID", new Func<MobileParamsGroupTab, IQPFormService, string>((self, ctx) => self.Tab_ID != null ? self.Tab_ID.ToString() : null) },
			{ "MarketingService_ID", new Func<MobileParamsGroupTab, IQPFormService, string>((self, ctx) => self.MarketingService_ID != null ? self.MarketingService_ID.ToString() : null) },
			{ "Description", new Func<MobileParamsGroupTab, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "DescriptionEngl", new Func<MobileParamsGroupTab, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "DescriptionTat", new Func<MobileParamsGroupTab, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MobileParamsGroupTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TariffParamGroupPriority: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TariffParamGroupPriority, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TariffParamGroupPriority,  IQPFormService, string>>
		{
			{ "Tariff_ID", new Func<TariffParamGroupPriority, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "SortOrder", new Func<TariffParamGroupPriority, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "ParamGroup_ID", new Func<TariffParamGroupPriority, IQPFormService, string>((self, ctx) => self.ParamGroup_ID != null ? self.ParamGroup_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TariffParamGroupPriority", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveService,  IQPFormService, string>>
		{
			{ "Title", new Func<ArchiveService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Region_ID", new Func<ArchiveService, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
			{ "IsAction", new Func<ArchiveService, IQPFormService, string>((self, ctx) => self.IsAction != null ? self.IsAction.Value ? "1" : "0" : null) },
			{ "Note", new Func<ArchiveService, IQPFormService, string>((self, ctx) => self.Note != null ? ctx.ReplacePlaceholders(self.Note) : null) },
			{ "Price", new Func<ArchiveService, IQPFormService, string>((self, ctx) => self.Price != null ? ctx.ReplacePlaceholders(self.Price) : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsActionExact { get { return this.IsAction == null ? default(Boolean) : this.IsAction.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Note = context.ReplacePlaceholders(this.Note);
			this.Price = context.ReplacePlaceholders(this.Price);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveMobileServiceBookmark: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveMobileServiceBookmark, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveMobileServiceBookmark,  IQPFormService, string>>
		{
			{ "Title", new Func<ArchiveMobileServiceBookmark, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Order", new Func<ArchiveMobileServiceBookmark, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Service_ID", new Func<ArchiveMobileServiceBookmark, IQPFormService, string>((self, ctx) => self.Service_ID != null ? self.Service_ID.ToString() : null) },
			{ "FullDescription", new Func<ArchiveMobileServiceBookmark, IQPFormService, string>((self, ctx) => self.FullDescription != null ? ctx.ReplacePlaceholders(self.FullDescription) : null) },
			{ "Description", new Func<ArchiveMobileServiceBookmark, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.FullDescription = context.ReplacePlaceholders(this.FullDescription);
			this.Description = context.ReplacePlaceholders(this.Description);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveMobileServiceBookmark", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PrivelegeAndBonus: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PrivelegeAndBonus, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PrivelegeAndBonus,  IQPFormService, string>>
		{
			{ "Title", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Priority", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Priority != null ? self.Priority.ToString() : null) },
			{ "Preview", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Preview != null ? self.Preview : null) },
			{ "Text", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Image", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileImage", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TileImage != null ? self.TileImage : null) },
			{ "TileType", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TileType != null ? ctx.ReplacePlaceholders(self.TileType) : null) },
			{ "SpecialConditions", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.SpecialConditions != null ? ctx.ReplacePlaceholders(self.SpecialConditions) : null) },
			{ "MetaKeywords", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "ProductLinks", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.ProductLinks != null ? ctx.ReplacePlaceholders(self.ProductLinks) : null) },
			{ "TitleFormat_ID", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "TitleEngl", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "PreviewEngl", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.PreviewEngl != null ? self.PreviewEngl : null) },
			{ "TextEngl", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TitleTat", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "PreviewTat", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.PreviewTat != null ? self.PreviewTat : null) },
			{ "TextTat", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "SpecialConditionsEngl", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.SpecialConditionsEngl != null ? ctx.ReplacePlaceholders(self.SpecialConditionsEngl) : null) },
			{ "SpecialConditionsTat", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.SpecialConditionsTat != null ? ctx.ReplacePlaceholders(self.SpecialConditionsTat) : null) },
			{ "ProductLinksTat", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.ProductLinksTat != null ? ctx.ReplacePlaceholders(self.ProductLinksTat) : null) },
			{ "ProductLinksEngl", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.ProductLinksEngl != null ? ctx.ReplacePlaceholders(self.ProductLinksEngl) : null) },
			{ "IsBlank", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.IsBlank != null ? self.IsBlank.Value ? "1" : "0" : null) },
			{ "PageLayout", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.PageLayout != null ? ctx.ReplacePlaceholders(self.PageLayout) : null) },
			{ "ChildRelativePath", new Func<PrivelegeAndBonus, IQPFormService, string>((self, ctx) => self.ChildRelativePath != null ? ctx.ReplacePlaceholders(self.ChildRelativePath) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileImageUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileImageUploadPath { get; set; }
		public Int32 PriorityExact { get { return this.Priority == null ? default(Int32) : this.Priority.Value; } }
		public Boolean IsBlankExact { get { return this.IsBlank == null ? default(Boolean) : this.IsBlank.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TileType = context.ReplacePlaceholders(this.TileType);
			this.SpecialConditions = context.ReplacePlaceholders(this.SpecialConditions);
			this.ProductLinks = context.ReplacePlaceholders(this.ProductLinks);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.SpecialConditionsEngl = context.ReplacePlaceholders(this.SpecialConditionsEngl);
			this.SpecialConditionsTat = context.ReplacePlaceholders(this.SpecialConditionsTat);
			this.ProductLinksTat = context.ReplacePlaceholders(this.ProductLinksTat);
			this.ProductLinksEngl = context.ReplacePlaceholders(this.ProductLinksEngl);
			this.PageLayout = context.ReplacePlaceholders(this.PageLayout);
			this.ChildRelativePath = context.ReplacePlaceholders(this.ChildRelativePath);
			this.ImageUrl = context.GetUrl(this.Image, "PrivelegeAndBonus", "Image");
			this.TileImageUrl = context.GetUrl(this.TileImage, "PrivelegeAndBonus", "TileImage");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "PrivelegeAndBonus", "Image");
			this.TileImageUploadPath = context.GetUploadPath(this.TileImage, "PrivelegeAndBonus", "TileImage");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PrivelegeAndBonus", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FaqContent: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FaqContent, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FaqContent,  IQPFormService, string>>
		{
			{ "Question", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Question != null ? ctx.ReplacePlaceholders(self.Question) : null) },
			{ "Answer", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Answer != null ? ctx.ReplacePlaceholders(self.Answer) : null) },
			{ "Group_ID", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Group_ID != null ? self.Group_ID.ToString() : null) },
			{ "Urls", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Urls != null ? self.Urls : null) },
			{ "FirstInUrls", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.FirstInUrls != null ? self.FirstInUrls : null) },
			{ "Order", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Notice", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.Notice != null ? ctx.ReplacePlaceholders(self.Notice) : null) },
			{ "QuestionEngl", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.QuestionEngl != null ? ctx.ReplacePlaceholders(self.QuestionEngl) : null) },
			{ "QuestionTat", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.QuestionTat != null ? ctx.ReplacePlaceholders(self.QuestionTat) : null) },
			{ "AnswerEngl", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.AnswerEngl != null ? ctx.ReplacePlaceholders(self.AnswerEngl) : null) },
			{ "AnswerTat", new Func<FaqContent, IQPFormService, string>((self, ctx) => self.AnswerTat != null ? ctx.ReplacePlaceholders(self.AnswerTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Question = context.ReplacePlaceholders(this.Question);
			this.Answer = context.ReplacePlaceholders(this.Answer);
			this.Notice = context.ReplacePlaceholders(this.Notice);
			this.QuestionEngl = context.ReplacePlaceholders(this.QuestionEngl);
			this.QuestionTat = context.ReplacePlaceholders(this.QuestionTat);
			this.AnswerEngl = context.ReplacePlaceholders(this.AnswerEngl);
			this.AnswerTat = context.ReplacePlaceholders(this.AnswerTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FaqContent", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FaqGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FaqGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FaqGroup,  IQPFormService, string>>
		{
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FaqGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SiteText: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SiteText, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteText,  IQPFormService, string>>
		{
			{ "Title", new Func<SiteText, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Text", new Func<SiteText, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<SiteText, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<SiteText, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteText", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVChannelTheme: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVChannelTheme, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVChannelTheme,  IQPFormService, string>>
		{
			{ "Title", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Icon", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "SortOrder", new Func<TVChannelTheme, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.IconUrl = context.GetUrl(this.Icon, "TVChannelTheme", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "TVChannelTheme", "Icon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVChannelTheme", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingTVPackage: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingTVPackage, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingTVPackage,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Image", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileIcon", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.TileIcon != null ? self.TileIcon : null) },
			{ "FamilyIcon", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "Purpose", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "MetaKeywords", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "MetaTags", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.MetaTags != null ? self.MetaTags : null) },
			{ "TitleFormat_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MarketingSign_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchive", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "IsTariff", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.IsTariff != null ? self.IsTariff.Value ? "1" : "0" : null) },
			{ "IsPopular", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.IsPopular != null ? self.IsPopular.Value ? "1" : "0" : null) },
			{ "FamilyIconHover", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "RecomendedTariff_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.RecomendedTariff_ID != null ? self.RecomendedTariff_ID.ToString() : null) },
			{ "Family_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Family_ID != null ? self.Family_ID.ToString() : null) },
			{ "InacParamType_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.InacParamType_ID != null ? self.InacParamType_ID.ToString() : null) },
			{ "HideInList", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.HideInList != null ? self.HideInList.Value ? "1" : "0" : null) },
			{ "RemarksForFamily", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.RemarksForFamily != null ? self.RemarksForFamily : null) },
			{ "RemarksForFamilyEngl", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.RemarksForFamilyEngl != null ? self.RemarksForFamilyEngl : null) },
			{ "RemarksForFamilyTat", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.RemarksForFamilyTat != null ? self.RemarksForFamilyTat : null) },
			{ "Category_ID", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Category_ID != null ? self.Category_ID.ToString() : null) },
			{ "TariffType", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.TariffType != null ? ctx.ReplacePlaceholders(self.TariffType) : null) },
			{ "Collectable", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Collectable != null ? self.Collectable.Value ? "1" : "0" : null) },
			{ "Discounted", new Func<MarketingTVPackage, IQPFormService, string>((self, ctx) => self.Discounted != null ? self.Discounted.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileIconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileIconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Boolean IsTariffExact { get { return this.IsTariff == null ? default(Boolean) : this.IsTariff.Value; } }
		public Boolean IsPopularExact { get { return this.IsPopular == null ? default(Boolean) : this.IsPopular.Value; } }
		public Boolean HideInListExact { get { return this.HideInList == null ? default(Boolean) : this.HideInList.Value; } }
		public Boolean CollectableExact { get { return this.Collectable == null ? default(Boolean) : this.Collectable.Value; } }
		public Boolean DiscountedExact { get { return this.Discounted == null ? default(Boolean) : this.Discounted.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.TariffType = context.ReplacePlaceholders(this.TariffType);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingTVPackage", "Image");
			this.TileIconUrl = context.GetUrl(this.TileIcon, "MarketingTVPackage", "TileIcon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingTVPackage", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingTVPackage", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingTVPackage", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingTVPackage", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingTVPackage", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingTVPackage", "FamilyIconHoverTat");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingTVPackage", "Image");
			this.TileIconUploadPath = context.GetUploadPath(this.TileIcon, "MarketingTVPackage", "TileIcon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingTVPackage", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingTVPackage", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingTVPackage", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingTVPackage", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingTVPackage", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingTVPackage", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingTVPackage", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QuickLinksTitle: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QuickLinksTitle, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QuickLinksTitle,  IQPFormService, string>>
		{
			{ "PhraseText", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.PhraseText != null ? self.PhraseText : null) },
			{ "PhraseTextEngl", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.PhraseTextEngl != null ? self.PhraseTextEngl : null) },
			{ "PhraseTextTat", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.PhraseTextTat != null ? self.PhraseTextTat : null) },
			{ "DefaultWord", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.DefaultWord != null ? ctx.ReplacePlaceholders(self.DefaultWord) : null) },
			{ "DefaultWordEngl", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.DefaultWordEngl != null ? ctx.ReplacePlaceholders(self.DefaultWordEngl) : null) },
			{ "DefaultWordTat", new Func<QuickLinksTitle, IQPFormService, string>((self, ctx) => self.DefaultWordTat != null ? ctx.ReplacePlaceholders(self.DefaultWordTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.DefaultWord = context.ReplacePlaceholders(this.DefaultWord);
			this.DefaultWordEngl = context.ReplacePlaceholders(this.DefaultWordEngl);
			this.DefaultWordTat = context.ReplacePlaceholders(this.DefaultWordTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QuickLinksTitle", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QuickLinksGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QuickLinksGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QuickLinksGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "UrlForTitle", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.UrlForTitle != null ? ctx.ReplacePlaceholders(self.UrlForTitle) : null) },
			{ "SortOrder", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Keyword", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.Keyword != null ? ctx.ReplacePlaceholders(self.Keyword) : null) },
			{ "Icon", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "KeyPhrase_ID", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.KeyPhrase_ID != null ? self.KeyPhrase_ID.ToString() : null) },
			{ "Text", new Func<QuickLinksGroup, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.UrlForTitle = context.ReplacePlaceholders(this.UrlForTitle);
			this.Keyword = context.ReplacePlaceholders(this.Keyword);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.IconUrl = context.GetUrl(this.Icon, "QuickLinksGroup", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "QuickLinksGroup", "Icon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QuickLinksGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodTariffParameterGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodTariffParameterGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodTariffParameterGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "SortOrder", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "ExpandByDefault", new Func<ProvodTariffParameterGroup, IQPFormService, string>((self, ctx) => self.ExpandByDefault != null ? self.ExpandByDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean ExpandByDefaultExact { get { return this.ExpandByDefault == null ? default(Boolean) : this.ExpandByDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodTariffParameterGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class InternetTariffFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<InternetTariffFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<InternetTariffFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "TitleForTile", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<InternetTariffFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("InternetTariffFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneTariffFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneTariffFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneTariffFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "TitleForTile", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<PhoneTariffFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneTariffFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodServiceFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodServiceFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodServiceFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "TextForSwitch", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TextForSwitch != null ? ctx.ReplacePlaceholders(self.TextForSwitch) : null) },
			{ "TextForSwitchEngl", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TextForSwitchEngl != null ? ctx.ReplacePlaceholders(self.TextForSwitchEngl) : null) },
			{ "TextForSwitchTat", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TextForSwitchTat != null ? ctx.ReplacePlaceholders(self.TextForSwitchTat) : null) },
			{ "TitleForTile", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<ProvodServiceFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TextForSwitch = context.ReplacePlaceholders(this.TextForSwitch);
			this.TextForSwitchEngl = context.ReplacePlaceholders(this.TextForSwitchEngl);
			this.TextForSwitchTat = context.ReplacePlaceholders(this.TextForSwitchTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodServiceFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodServiceParameterGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodServiceParameterGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodServiceParameterGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "SortOrder", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "ExpandByDefault", new Func<ProvodServiceParameterGroup, IQPFormService, string>((self, ctx) => self.ExpandByDefault != null ? self.ExpandByDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Boolean ExpandByDefaultExact { get { return this.ExpandByDefault == null ? default(Boolean) : this.ExpandByDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodServiceParameterGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class InternetTariffCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<InternetTariffCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<InternetTariffCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "CheckConnectionAvailable", new Func<InternetTariffCategory, IQPFormService, string>((self, ctx) => self.CheckConnectionAvailable != null ? self.CheckConnectionAvailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean CheckConnectionAvailableExact { get { return this.CheckConnectionAvailable == null ? default(Boolean) : this.CheckConnectionAvailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("InternetTariffCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneTariffCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneTariffCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneTariffCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "CheckConnectionAvailable", new Func<PhoneTariffCategory, IQPFormService, string>((self, ctx) => self.CheckConnectionAvailable != null ? self.CheckConnectionAvailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean CheckConnectionAvailableExact { get { return this.CheckConnectionAvailable == null ? default(Boolean) : this.CheckConnectionAvailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneTariffCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodServiceCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodServiceCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodServiceCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "CheckConnectionAvailable", new Func<ProvodServiceCategory, IQPFormService, string>((self, ctx) => self.CheckConnectionAvailable != null ? self.CheckConnectionAvailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean CheckConnectionAvailableExact { get { return this.CheckConnectionAvailable == null ? default(Boolean) : this.CheckConnectionAvailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodServiceCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingInternetTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingInternetTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingInternetTariff,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Image", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileIcon", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.TileIcon != null ? self.TileIcon : null) },
			{ "FamilyIcon", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "Purpose", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "MetaKeywords", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "MetaTags", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.MetaTags != null ? self.MetaTags : null) },
			{ "TitleFormat_ID", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MarketingSign_ID", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchive", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "FamilyIconHover", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "Family_ID", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.Family_ID != null ? self.Family_ID.ToString() : null) },
			{ "HideInList", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.HideInList != null ? self.HideInList.Value ? "1" : "0" : null) },
			{ "RemarksForFamily", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamily != null ? self.RemarksForFamily : null) },
			{ "RemarksForFamilyEngl", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamilyEngl != null ? self.RemarksForFamilyEngl : null) },
			{ "RemarksForFamilyTat", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamilyTat != null ? self.RemarksForFamilyTat : null) },
			{ "InacParamType_ID", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.InacParamType_ID != null ? self.InacParamType_ID.ToString() : null) },
			{ "AnnualContract", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.AnnualContract != null ? self.AnnualContract.Value ? "1" : "0" : null) },
			{ "AnnualContractFeeType", new Func<MarketingInternetTariff, IQPFormService, string>((self, ctx) => self.AnnualContractFeeType != null ? ctx.ReplacePlaceholders(self.AnnualContractFeeType) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileIconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileIconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Boolean HideInListExact { get { return this.HideInList == null ? default(Boolean) : this.HideInList.Value; } }
		public Boolean AnnualContractExact { get { return this.AnnualContract == null ? default(Boolean) : this.AnnualContract.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.AnnualContractFeeType = context.ReplacePlaceholders(this.AnnualContractFeeType);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingInternetTariff", "Image");
			this.TileIconUrl = context.GetUrl(this.TileIcon, "MarketingInternetTariff", "TileIcon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingInternetTariff", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingInternetTariff", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingInternetTariff", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingInternetTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingInternetTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingInternetTariff", "FamilyIconHoverTat");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingInternetTariff", "Image");
			this.TileIconUploadPath = context.GetUploadPath(this.TileIcon, "MarketingInternetTariff", "TileIcon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingInternetTariff", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingInternetTariff", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingInternetTariff", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingInternetTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingInternetTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingInternetTariff", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingInternetTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingPhoneTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingPhoneTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingPhoneTariff,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Image", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileIcon", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.TileIcon != null ? self.TileIcon : null) },
			{ "FamilyIcon", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "Purpose", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "MetaKeywords", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "MetaTags", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.MetaTags != null ? self.MetaTags : null) },
			{ "TitleFormat_ID", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MarketingSign_ID", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchive", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "FamilyIconHover", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "Family_ID", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.Family_ID != null ? self.Family_ID.ToString() : null) },
			{ "HideInList", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.HideInList != null ? self.HideInList.Value ? "1" : "0" : null) },
			{ "InacParamType_ID", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.InacParamType_ID != null ? self.InacParamType_ID.ToString() : null) },
			{ "RemarksForFamily", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamily != null ? self.RemarksForFamily : null) },
			{ "RemarksForFamilyEngl", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamilyEngl != null ? self.RemarksForFamilyEngl : null) },
			{ "RemarksForFamilyTat", new Func<MarketingPhoneTariff, IQPFormService, string>((self, ctx) => self.RemarksForFamilyTat != null ? self.RemarksForFamilyTat : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileIconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileIconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Boolean HideInListExact { get { return this.HideInList == null ? default(Boolean) : this.HideInList.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingPhoneTariff", "Image");
			this.TileIconUrl = context.GetUrl(this.TileIcon, "MarketingPhoneTariff", "TileIcon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingPhoneTariff", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingPhoneTariff", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingPhoneTariff", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingPhoneTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingPhoneTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingPhoneTariff", "FamilyIconHoverTat");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingPhoneTariff", "Image");
			this.TileIconUploadPath = context.GetUploadPath(this.TileIcon, "MarketingPhoneTariff", "TileIcon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingPhoneTariff", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingPhoneTariff", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingPhoneTariff", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingPhoneTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingPhoneTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingPhoneTariff", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingPhoneTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingProvodService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingProvodService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingProvodService,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Image", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileIcon", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.TileIcon != null ? self.TileIcon : null) },
			{ "FamilyIcon", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "Purpose", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "MetaKeywords", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "TitleFormat_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MetaTags", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.MetaTags != null ? self.MetaTags : null) },
			{ "MarketingSign_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchive", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "FamilyIconHover", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "Family_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Family_ID != null ? self.Family_ID.ToString() : null) },
			{ "OfferInCart", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCart != null ? self.OfferInCart.Value ? "1" : "0" : null) },
			{ "OfferInCartForOneTv", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCartForOneTv != null ? self.OfferInCartForOneTv.Value ? "1" : "0" : null) },
			{ "OfferInCartForOneTvInKits", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCartForOneTvInKits != null ? self.OfferInCartForOneTvInKits.Value ? "1" : "0" : null) },
			{ "OfferInCartForSeveralTv", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCartForSeveralTv != null ? self.OfferInCartForSeveralTv.Value ? "1" : "0" : null) },
			{ "OfferInCartForSeveralTvInKits", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCartForSeveralTvInKits != null ? self.OfferInCartForSeveralTvInKits.Value ? "1" : "0" : null) },
			{ "IncludeInCartForSeveralTv", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.IncludeInCartForSeveralTv != null ? self.IncludeInCartForSeveralTv.Value ? "1" : "0" : null) },
			{ "IncludeInCartForSeveralTvInKits", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.IncludeInCartForSeveralTvInKits != null ? self.IncludeInCartForSeveralTvInKits.Value ? "1" : "0" : null) },
			{ "IncludeInCartForTvTariffsWithoutInternet", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.IncludeInCartForTvTariffsWithoutInternet != null ? self.IncludeInCartForTvTariffsWithoutInternet.Value ? "1" : "0" : null) },
			{ "IncludeInCartForTvTariffsWithoutInternetInKits", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.IncludeInCartForTvTariffsWithoutInternetInKits != null ? self.IncludeInCartForTvTariffsWithoutInternetInKits.Value ? "1" : "0" : null) },
			{ "OfferInCartForInternetTariffs", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.OfferInCartForInternetTariffs != null ? self.OfferInCartForInternetTariffs.Value ? "1" : "0" : null) },
			{ "CommentsForFamily", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.CommentsForFamily != null ? self.CommentsForFamily : null) },
			{ "CommentsForFamilyEngl", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.CommentsForFamilyEngl != null ? self.CommentsForFamilyEngl : null) },
			{ "CommentsForFamilyTat", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.CommentsForFamilyTat != null ? self.CommentsForFamilyTat : null) },
			{ "HideInList", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.HideInList != null ? self.HideInList.Value ? "1" : "0" : null) },
			{ "MarketingEquipment_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.MarketingEquipment_ID != null ? self.MarketingEquipment_ID.ToString() : null) },
			{ "InacParamType_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.InacParamType_ID != null ? self.InacParamType_ID.ToString() : null) },
			{ "AvailableInSelfService", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.AvailableInSelfService != null ? self.AvailableInSelfService.Value ? "1" : "0" : null) },
			{ "DiscountArray", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.DiscountArray != null ? ctx.ReplacePlaceholders(self.DiscountArray) : null) },
			{ "ServiceType", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.ServiceType != null ? ctx.ReplacePlaceholders(self.ServiceType) : null) },
			{ "DiscountsExpand", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.DiscountsExpand != null ? self.DiscountsExpand.Value ? "1" : "0" : null) },
			{ "Prefix_ID", new Func<MarketingProvodService, IQPFormService, string>((self, ctx) => self.Prefix_ID != null ? self.Prefix_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileIconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileIconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Boolean OfferInCartExact { get { return this.OfferInCart == null ? default(Boolean) : this.OfferInCart.Value; } }
		public Boolean OfferInCartForOneTvExact { get { return this.OfferInCartForOneTv == null ? default(Boolean) : this.OfferInCartForOneTv.Value; } }
		public Boolean OfferInCartForOneTvInKitsExact { get { return this.OfferInCartForOneTvInKits == null ? default(Boolean) : this.OfferInCartForOneTvInKits.Value; } }
		public Boolean OfferInCartForSeveralTvExact { get { return this.OfferInCartForSeveralTv == null ? default(Boolean) : this.OfferInCartForSeveralTv.Value; } }
		public Boolean OfferInCartForSeveralTvInKitsExact { get { return this.OfferInCartForSeveralTvInKits == null ? default(Boolean) : this.OfferInCartForSeveralTvInKits.Value; } }
		public Boolean IncludeInCartForSeveralTvExact { get { return this.IncludeInCartForSeveralTv == null ? default(Boolean) : this.IncludeInCartForSeveralTv.Value; } }
		public Boolean IncludeInCartForSeveralTvInKitsExact { get { return this.IncludeInCartForSeveralTvInKits == null ? default(Boolean) : this.IncludeInCartForSeveralTvInKits.Value; } }
		public Boolean IncludeInCartForTvTariffsWithoutInternetExact { get { return this.IncludeInCartForTvTariffsWithoutInternet == null ? default(Boolean) : this.IncludeInCartForTvTariffsWithoutInternet.Value; } }
		public Boolean IncludeInCartForTvTariffsWithoutInternetInKitsExact { get { return this.IncludeInCartForTvTariffsWithoutInternetInKits == null ? default(Boolean) : this.IncludeInCartForTvTariffsWithoutInternetInKits.Value; } }
		public Boolean OfferInCartForInternetTariffsExact { get { return this.OfferInCartForInternetTariffs == null ? default(Boolean) : this.OfferInCartForInternetTariffs.Value; } }
		public Boolean HideInListExact { get { return this.HideInList == null ? default(Boolean) : this.HideInList.Value; } }
		public Boolean AvailableInSelfServiceExact { get { return this.AvailableInSelfService == null ? default(Boolean) : this.AvailableInSelfService.Value; } }
		public Boolean DiscountsExpandExact { get { return this.DiscountsExpand == null ? default(Boolean) : this.DiscountsExpand.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.DiscountArray = context.ReplacePlaceholders(this.DiscountArray);
			this.ServiceType = context.ReplacePlaceholders(this.ServiceType);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingProvodService", "Image");
			this.TileIconUrl = context.GetUrl(this.TileIcon, "MarketingProvodService", "TileIcon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingProvodService", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingProvodService", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingProvodService", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingProvodService", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingProvodService", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingProvodService", "FamilyIconHoverTat");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingProvodService", "Image");
			this.TileIconUploadPath = context.GetUploadPath(this.TileIcon, "MarketingProvodService", "TileIcon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingProvodService", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingProvodService", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingProvodService", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingProvodService", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingProvodService", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingProvodService", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingProvodService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ServiceForIternetTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ServiceForIternetTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ServiceForIternetTariff,  IQPFormService, string>>
		{
			{ "Tariff_ID", new Func<ServiceForIternetTariff, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "Service_ID", new Func<ServiceForIternetTariff, IQPFormService, string>((self, ctx) => self.Service_ID != null ? self.Service_ID.ToString() : null) },
			{ "ParameterGroup_ID", new Func<ServiceForIternetTariff, IQPFormService, string>((self, ctx) => self.ParameterGroup_ID != null ? self.ParameterGroup_ID.ToString() : null) },
			{ "IncludedByDefault", new Func<ServiceForIternetTariff, IQPFormService, string>((self, ctx) => self.IncludedByDefault != null ? self.IncludedByDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IncludedByDefaultExact { get { return this.IncludedByDefault == null ? default(Boolean) : this.IncludedByDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ServiceForIternetTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ServiceForPhoneTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ServiceForPhoneTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ServiceForPhoneTariff,  IQPFormService, string>>
		{
			{ "Tariff_ID", new Func<ServiceForPhoneTariff, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "Service_ID", new Func<ServiceForPhoneTariff, IQPFormService, string>((self, ctx) => self.Service_ID != null ? self.Service_ID.ToString() : null) },
			{ "ParameterGroup_ID", new Func<ServiceForPhoneTariff, IQPFormService, string>((self, ctx) => self.ParameterGroup_ID != null ? self.ParameterGroup_ID.ToString() : null) },
			{ "IncludedByDefault", new Func<ServiceForPhoneTariff, IQPFormService, string>((self, ctx) => self.IncludedByDefault != null ? self.IncludedByDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IncludedByDefaultExact { get { return this.IncludedByDefault == null ? default(Boolean) : this.IncludedByDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ServiceForPhoneTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodKitFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodKitFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodKitFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "TitleForTile", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<ProvodKitFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodKitFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodKitCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodKitCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodKitCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "CheckConnectionAvailable", new Func<ProvodKitCategory, IQPFormService, string>((self, ctx) => self.CheckConnectionAvailable != null ? self.CheckConnectionAvailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean CheckConnectionAvailableExact { get { return this.CheckConnectionAvailable == null ? default(Boolean) : this.CheckConnectionAvailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodKitCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingProvodKit: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingProvodKit, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingProvodKit,  IQPFormService, string>>
		{
			{ "Title", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Legal", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Image", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "TileIcon", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.TileIcon != null ? self.TileIcon : null) },
			{ "FamilyIcon", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "Purpose", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Purpose != null ? ctx.ReplacePlaceholders(self.Purpose) : null) },
			{ "PurposeEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.PurposeEngl != null ? ctx.ReplacePlaceholders(self.PurposeEngl) : null) },
			{ "PurposeTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.PurposeTat != null ? ctx.ReplacePlaceholders(self.PurposeTat) : null) },
			{ "MetaKeywords", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "MetaTags", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.MetaTags != null ? self.MetaTags : null) },
			{ "TitleFormat_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "MarketingSign_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchive", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "FamilyIconHover", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "Family_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.Family_ID != null ? self.Family_ID.ToString() : null) },
			{ "HideMainTariffParameters", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.HideMainTariffParameters != null ? self.HideMainTariffParameters.Value ? "1" : "0" : null) },
			{ "InternetTariff_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.InternetTariff_ID != null ? self.InternetTariff_ID.ToString() : null) },
			{ "PhoneTariff_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.PhoneTariff_ID != null ? self.PhoneTariff_ID.ToString() : null) },
			{ "HideInList", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.HideInList != null ? self.HideInList.Value ? "1" : "0" : null) },
			{ "InacParamType_ID", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.InacParamType_ID != null ? self.InacParamType_ID.ToString() : null) },
			{ "CommentsForFamily", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.CommentsForFamily != null ? self.CommentsForFamily : null) },
			{ "CommentsForFamilyEngl", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.CommentsForFamilyEngl != null ? self.CommentsForFamilyEngl : null) },
			{ "CommentsForFamilyTat", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.CommentsForFamilyTat != null ? self.CommentsForFamilyTat : null) },
			{ "AnnualContract", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.AnnualContract != null ? self.AnnualContract.Value ? "1" : "0" : null) },
			{ "AnnualContractFeeType", new Func<MarketingProvodKit, IQPFormService, string>((self, ctx) => self.AnnualContractFeeType != null ? ctx.ReplacePlaceholders(self.AnnualContractFeeType) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string TileIconUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string TileIconUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Boolean HideMainTariffParametersExact { get { return this.HideMainTariffParameters == null ? default(Boolean) : this.HideMainTariffParameters.Value; } }
		public Boolean HideInListExact { get { return this.HideInList == null ? default(Boolean) : this.HideInList.Value; } }
		public Boolean AnnualContractExact { get { return this.AnnualContract == null ? default(Boolean) : this.AnnualContract.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.Purpose = context.ReplacePlaceholders(this.Purpose);
			this.PurposeEngl = context.ReplacePlaceholders(this.PurposeEngl);
			this.PurposeTat = context.ReplacePlaceholders(this.PurposeTat);
			this.AnnualContractFeeType = context.ReplacePlaceholders(this.AnnualContractFeeType);
			this.ImageUrl = context.GetUrl(this.Image, "MarketingProvodKit", "Image");
			this.TileIconUrl = context.GetUrl(this.TileIcon, "MarketingProvodKit", "TileIcon");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "MarketingProvodKit", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "MarketingProvodKit", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "MarketingProvodKit", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "MarketingProvodKit", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "MarketingProvodKit", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "MarketingProvodKit", "FamilyIconHoverTat");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "MarketingProvodKit", "Image");
			this.TileIconUploadPath = context.GetUploadPath(this.TileIcon, "MarketingProvodKit", "TileIcon");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "MarketingProvodKit", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "MarketingProvodKit", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "MarketingProvodKit", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "MarketingProvodKit", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "MarketingProvodKit", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "MarketingProvodKit", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingProvodKit", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodKit: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodKit, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodKit,  IQPFormService, string>>
		{
			{ "MarketKit_ID", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MarketKit_ID != null ? self.MarketKit_ID.ToString() : null) },
			{ "SortOrder", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Price", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "SubscriptionFee", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.SubscriptionFee != null ? self.SubscriptionFee.ToString() : null) },
			{ "SubscriptionFeeType_ID", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.SubscriptionFeeType_ID != null ? self.SubscriptionFeeType_ID.ToString() : null) },
			{ "MainParameterText", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterText != null ? self.MainParameterText : null) },
			{ "MainParameterValue", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterValue != null ? ctx.ReplacePlaceholders(self.MainParameterValue) : null) },
			{ "Benefit", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "Legal", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "PDF", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.PDF != null ? self.PDF : null) },
			{ "MainParameterTextEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterTextEngl != null ? self.MainParameterTextEngl : null) },
			{ "MainParameterValueEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterValueEngl != null ? ctx.ReplacePlaceholders(self.MainParameterValueEngl) : null) },
			{ "BenefitEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "LegalEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "PDFEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.PDFEngl != null ? self.PDFEngl : null) },
			{ "MainParameterTextTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterTextTat != null ? self.MainParameterTextTat : null) },
			{ "MainParameterValueTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.MainParameterValueTat != null ? ctx.ReplacePlaceholders(self.MainParameterValueTat) : null) },
			{ "BenefitTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "LegalTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "PDFTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.PDFTat != null ? self.PDFTat : null) },
			{ "IsArchive", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "INACID", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.INACID != null ? ctx.ReplacePlaceholders(self.INACID) : null) },
			{ "InacIdArray", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.InacIdArray != null ? ctx.ReplacePlaceholders(self.InacIdArray) : null) },
			{ "FamilyIcon", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<ProvodKit, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
		};

		#endregion
		#region Genarated properties
		public string PDFUrl { get; set; }
		public string PDFEnglUrl { get; set; }
		public string PDFTatUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string PDFUploadPath { get; set; }
		public string PDFEnglUploadPath { get; set; }
		public string PDFTatUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		public Double PriceExact { get { return this.Price == null ? default(Double) : this.Price.Value; } }
		public Double SubscriptionFeeExact { get { return this.SubscriptionFee == null ? default(Double) : this.SubscriptionFee.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.MainParameterValue = context.ReplacePlaceholders(this.MainParameterValue);
			this.MainParameterValueEngl = context.ReplacePlaceholders(this.MainParameterValueEngl);
			this.MainParameterValueTat = context.ReplacePlaceholders(this.MainParameterValueTat);
			this.INACID = context.ReplacePlaceholders(this.INACID);
			this.InacIdArray = context.ReplacePlaceholders(this.InacIdArray);
			this.PDFUrl = context.GetUrl(this.PDF, "ProvodKit", "PDF");
			this.PDFEnglUrl = context.GetUrl(this.PDFEngl, "ProvodKit", "PDFEngl");
			this.PDFTatUrl = context.GetUrl(this.PDFTat, "ProvodKit", "PDFTat");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "ProvodKit", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "ProvodKit", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "ProvodKit", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "ProvodKit", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "ProvodKit", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "ProvodKit", "FamilyIconHoverTat");
			this.PDFUploadPath = context.GetUploadPath(this.PDF, "ProvodKit", "PDF");
			this.PDFEnglUploadPath = context.GetUploadPath(this.PDFEngl, "ProvodKit", "PDFEngl");
			this.PDFTatUploadPath = context.GetUploadPath(this.PDFTat, "ProvodKit", "PDFTat");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "ProvodKit", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "ProvodKit", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "ProvodKit", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "ProvodKit", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "ProvodKit", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "ProvodKit", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodKit", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class LocalRoamingOperator: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<LocalRoamingOperator, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<LocalRoamingOperator,  IQPFormService, string>>
		{
			{ "Title", new Func<LocalRoamingOperator, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("LocalRoamingOperator", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RoamingTariffParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RoamingTariffParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RoamingTariffParam,  IQPFormService, string>>
		{
			{ "TariffZone_ID", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.TariffZone_ID != null ? self.TariffZone_ID.ToString() : null) },
			{ "Title", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "SortOrder", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Group", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.Group != null ? ctx.ReplacePlaceholders(self.Group) : null) },
			{ "Value", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "ValueEngl", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.ValueEngl != null ? ctx.ReplacePlaceholders(self.ValueEngl) : null) },
			{ "ValueTat", new Func<RoamingTariffParam, IQPFormService, string>((self, ctx) => self.ValueTat != null ? ctx.ReplacePlaceholders(self.ValueTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Group = context.ReplacePlaceholders(this.Group);
			this.Value = context.ReplacePlaceholders(this.Value);
			this.ValueEngl = context.ReplacePlaceholders(this.ValueEngl);
			this.ValueTat = context.ReplacePlaceholders(this.ValueTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RoamingTariffParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVPackageFamily: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVPackageFamily, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVPackageFamily,  IQPFormService, string>>
		{
			{ "Title", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "TitleForTile", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.TitleForTile != null ? ctx.ReplacePlaceholders(self.TitleForTile) : null) },
			{ "TitleForTileEngl", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.TitleForTileEngl != null ? ctx.ReplacePlaceholders(self.TitleForTileEngl) : null) },
			{ "TitleForTileTat", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.TitleForTileTat != null ? ctx.ReplacePlaceholders(self.TitleForTileTat) : null) },
			{ "MarketingSign_ID", new Func<TVPackageFamily, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.TitleForTile = context.ReplacePlaceholders(this.TitleForTile);
			this.TitleForTileEngl = context.ReplacePlaceholders(this.TitleForTileEngl);
			this.TitleForTileTat = context.ReplacePlaceholders(this.TitleForTileTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVPackageFamily", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SocialNetwork: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SocialNetwork, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SocialNetwork,  IQPFormService, string>>
		{
			{ "Title", new Func<SocialNetwork, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Icon", new Func<SocialNetwork, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "Url", new Func<SocialNetwork, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
			{ "IconHover", new Func<SocialNetwork, IQPFormService, string>((self, ctx) => self.IconHover != null ? self.IconHover : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconHoverUrl { get; set; }
		public string IconUploadPath { get; set; }
		public string IconHoverUploadPath { get; set; }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Url = context.ReplacePlaceholders(this.Url);
			this.IconUrl = context.GetUrl(this.Icon, "SocialNetwork", "Icon");
			this.IconHoverUrl = context.GetUrl(this.IconHover, "SocialNetwork", "IconHover");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "SocialNetwork", "Icon");
			this.IconHoverUploadPath = context.GetUploadPath(this.IconHover, "SocialNetwork", "IconHover");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SocialNetwork", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class HelpDeviceType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<HelpDeviceType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<HelpDeviceType,  IQPFormService, string>>
		{
			{ "Title", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Image", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "SiteProduct_ID", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.SiteProduct_ID != null ? self.SiteProduct_ID.ToString() : null) },
			{ "SortOrder", new Func<HelpDeviceType, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.ImageUrl = context.GetUrl(this.Image, "HelpDeviceType", "Image");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "HelpDeviceType", "Image");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("HelpDeviceType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class HelpCenterParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<HelpCenterParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<HelpCenterParam,  IQPFormService, string>>
		{
			{ "ShortNumber", new Func<HelpCenterParam, IQPFormService, string>((self, ctx) => self.ShortNumber != null ? ctx.ReplacePlaceholders(self.ShortNumber) : null) },
			{ "CityNumber", new Func<HelpCenterParam, IQPFormService, string>((self, ctx) => self.CityNumber != null ? ctx.ReplacePlaceholders(self.CityNumber) : null) },
			{ "Email", new Func<HelpCenterParam, IQPFormService, string>((self, ctx) => self.Email != null ? ctx.ReplacePlaceholders(self.Email) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.ShortNumber = context.ReplacePlaceholders(this.ShortNumber);
			this.CityNumber = context.ReplacePlaceholders(this.CityNumber);
			this.Email = context.ReplacePlaceholders(this.Email);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("HelpCenterParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVChannelRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVChannelRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVChannelRegion,  IQPFormService, string>>
		{
			{ "TVChannel_ID", new Func<TVChannelRegion, IQPFormService, string>((self, ctx) => self.TVChannel_ID != null ? self.TVChannel_ID.ToString() : null) },
			{ "TVProgramChannel_ID", new Func<TVChannelRegion, IQPFormService, string>((self, ctx) => self.TVProgramChannel_ID != null ? self.TVProgramChannel_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 TVProgramChannel_IDExact { get { return this.TVProgramChannel_ID == null ? default(Int32) : this.TVProgramChannel_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVChannelRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneAsModemTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneAsModemTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneAsModemTab,  IQPFormService, string>>
		{
			{ "Title", new Func<PhoneAsModemTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<PhoneAsModemTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<PhoneAsModemTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneAsModemTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneAsModemInterface: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneAsModemInterface, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneAsModemInterface,  IQPFormService, string>>
		{
			{ "Title", new Func<PhoneAsModemInterface, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<PhoneAsModemInterface, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<PhoneAsModemInterface, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Index", new Func<PhoneAsModemInterface, IQPFormService, string>((self, ctx) => self.Index != null ? self.Index.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 IndexExact { get { return this.Index == null ? default(Int32) : this.Index.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneAsModemInterface", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class OperatingSystem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<OperatingSystem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<OperatingSystem,  IQPFormService, string>>
		{
			{ "Title", new Func<OperatingSystem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Index", new Func<OperatingSystem, IQPFormService, string>((self, ctx) => self.Index != null ? self.Index.ToString() : null) },
			{ "TitleEngl", new Func<OperatingSystem, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<OperatingSystem, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 IndexExact { get { return this.Index == null ? default(Int32) : this.Index.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("OperatingSystem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class CpaPartner: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<CpaPartner, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<CpaPartner,  IQPFormService, string>>
		{
			{ "Title", new Func<CpaPartner, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEng", new Func<CpaPartner, IQPFormService, string>((self, ctx) => self.TitleEng != null ? ctx.ReplacePlaceholders(self.TitleEng) : null) },
			{ "TitleTat", new Func<CpaPartner, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Phones", new Func<CpaPartner, IQPFormService, string>((self, ctx) => self.Phones != null ? ctx.ReplacePlaceholders(self.Phones) : null) },
			{ "Email", new Func<CpaPartner, IQPFormService, string>((self, ctx) => self.Email != null ? ctx.ReplacePlaceholders(self.Email) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEng = context.ReplacePlaceholders(this.TitleEng);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Phones = context.ReplacePlaceholders(this.Phones);
			this.Email = context.ReplacePlaceholders(this.Email);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("CpaPartner", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneAsModemInstruction: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneAsModemInstruction, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneAsModemInstruction,  IQPFormService, string>>
		{
			{ "Title", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Tab_ID", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.Tab_ID != null ? self.Tab_ID.ToString() : null) },
			{ "OperatingSystem_ID", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.OperatingSystem_ID != null ? self.OperatingSystem_ID.ToString() : null) },
			{ "Interface_ID", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.Interface_ID != null ? self.Interface_ID.ToString() : null) },
			{ "Text", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Index", new Func<PhoneAsModemInstruction, IQPFormService, string>((self, ctx) => self.Index != null ? self.Index.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 IndexExact { get { return this.Index == null ? default(Int32) : this.Index.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Text = context.ReplacePlaceholders(this.Text);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneAsModemInstruction", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class CpaShortNumber: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<CpaShortNumber, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<CpaShortNumber,  IQPFormService, string>>
		{
			{ "Number", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Number != null ? ctx.ReplacePlaceholders(self.Number) : null) },
			{ "Type", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Type != null ? ctx.ReplacePlaceholders(self.Type) : null) },
			{ "Tariff", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Tariff != null ? ctx.ReplacePlaceholders(self.Tariff) : null) },
			{ "TariffEng", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.TariffEng != null ? ctx.ReplacePlaceholders(self.TariffEng) : null) },
			{ "TariffTat", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.TariffTat != null ? ctx.ReplacePlaceholders(self.TariffTat) : null) },
			{ "Disconnect", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Disconnect != null ? ctx.ReplacePlaceholders(self.Disconnect) : null) },
			{ "DisconnectEng", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.DisconnectEng != null ? ctx.ReplacePlaceholders(self.DisconnectEng) : null) },
			{ "DisconnectTat", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.DisconnectTat != null ? ctx.ReplacePlaceholders(self.DisconnectTat) : null) },
			{ "Service", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Service != null ? ctx.ReplacePlaceholders(self.Service) : null) },
			{ "ServiceEng", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.ServiceEng != null ? ctx.ReplacePlaceholders(self.ServiceEng) : null) },
			{ "ServiceTat", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.ServiceTat != null ? ctx.ReplacePlaceholders(self.ServiceTat) : null) },
			{ "AreaOfService", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.AreaOfService != null ? self.AreaOfService : null) },
			{ "AreaOfServiceEng", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.AreaOfServiceEng != null ? self.AreaOfServiceEng : null) },
			{ "AreaOfServiceTat", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.AreaOfServiceTat != null ? self.AreaOfServiceTat : null) },
			{ "Partner_ID", new Func<CpaShortNumber, IQPFormService, string>((self, ctx) => self.Partner_ID != null ? self.Partner_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Number = context.ReplacePlaceholders(this.Number);
			this.Type = context.ReplacePlaceholders(this.Type);
			this.Tariff = context.ReplacePlaceholders(this.Tariff);
			this.TariffEng = context.ReplacePlaceholders(this.TariffEng);
			this.TariffTat = context.ReplacePlaceholders(this.TariffTat);
			this.Disconnect = context.ReplacePlaceholders(this.Disconnect);
			this.DisconnectEng = context.ReplacePlaceholders(this.DisconnectEng);
			this.DisconnectTat = context.ReplacePlaceholders(this.DisconnectTat);
			this.Service = context.ReplacePlaceholders(this.Service);
			this.ServiceEng = context.ReplacePlaceholders(this.ServiceEng);
			this.ServiceTat = context.ReplacePlaceholders(this.ServiceTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("CpaShortNumber", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ChangeNumberErrorText: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ChangeNumberErrorText, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ChangeNumberErrorText,  IQPFormService, string>>
		{
			{ "Title", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "ServiceErrorCode", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.ServiceErrorCode != null ? self.ServiceErrorCode.ToString() : null) },
			{ "ErrorText", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.ErrorText != null ? ctx.ReplacePlaceholders(self.ErrorText) : null) },
			{ "ErrorTextEngl", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.ErrorTextEngl != null ? ctx.ReplacePlaceholders(self.ErrorTextEngl) : null) },
			{ "ErrorTextTat", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.ErrorTextTat != null ? ctx.ReplacePlaceholders(self.ErrorTextTat) : null) },
			{ "ServiceUnavailable", new Func<ChangeNumberErrorText, IQPFormService, string>((self, ctx) => self.ServiceUnavailable != null ? self.ServiceUnavailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 ServiceErrorCodeExact { get { return this.ServiceErrorCode == null ? default(Int32) : this.ServiceErrorCode.Value; } }
		public Boolean ServiceUnavailableExact { get { return this.ServiceUnavailable == null ? default(Boolean) : this.ServiceUnavailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.ErrorText = context.ReplacePlaceholders(this.ErrorText);
			this.ErrorTextEngl = context.ReplacePlaceholders(this.ErrorTextEngl);
			this.ErrorTextTat = context.ReplacePlaceholders(this.ErrorTextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ChangeNumberErrorText", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentParamsTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentParamsTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentParamsTab,  IQPFormService, string>>
		{
			{ "Title", new Func<EquipmentParamsTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<EquipmentParamsTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<EquipmentParamsTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentParamsTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentTab,  IQPFormService, string>>
		{
			{ "ParamsTab_ID", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.ParamsTab_ID != null ? self.ParamsTab_ID.ToString() : null) },
			{ "MarketingEquipment_ID", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.MarketingEquipment_ID != null ? self.MarketingEquipment_ID.ToString() : null) },
			{ "Order", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Description", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<EquipmentTab, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentType,  IQPFormService, string>>
		{
			{ "Alias", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Title", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Product_ID", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.Product_ID != null ? self.Product_ID.ToString() : null) },
			{ "Order", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "MaySortList", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.MaySortList != null ? self.MaySortList.Value ? "1" : "0" : null) },
			{ "Image", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "DefaultImage", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.DefaultImage != null ? self.DefaultImage : null) },
			{ "StillTitle1", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.StillTitle1 != null ? ctx.ReplacePlaceholders(self.StillTitle1) : null) },
			{ "StillTitle2", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.StillTitle2 != null ? ctx.ReplacePlaceholders(self.StillTitle2) : null) },
			{ "StillTitle3", new Func<EquipmentType, IQPFormService, string>((self, ctx) => self.StillTitle3 != null ? ctx.ReplacePlaceholders(self.StillTitle3) : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageUrl { get; set; }
		public string DefaultImageUrl { get; set; }
		public string ImageUploadPath { get; set; }
		public string DefaultImageUploadPath { get; set; }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean MaySortListExact { get { return this.MaySortList == null ? default(Boolean) : this.MaySortList.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.StillTitle1 = context.ReplacePlaceholders(this.StillTitle1);
			this.StillTitle2 = context.ReplacePlaceholders(this.StillTitle2);
			this.StillTitle3 = context.ReplacePlaceholders(this.StillTitle3);
			this.ImageUrl = context.GetUrl(this.Image, "EquipmentType", "Image");
			this.DefaultImageUrl = context.GetUrl(this.DefaultImage, "EquipmentType", "DefaultImage");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "EquipmentType", "Image");
			this.DefaultImageUploadPath = context.GetUploadPath(this.DefaultImage, "EquipmentType", "DefaultImage");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentCategory,  IQPFormService, string>>
		{
			{ "Type_ID", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.Type_ID != null ? self.Type_ID.ToString() : null) },
			{ "Title", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Description", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Order", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Marked", new Func<EquipmentCategory, IQPFormService, string>((self, ctx) => self.Marked != null ? self.Marked.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean MarkedExact { get { return this.Marked == null ? default(Boolean) : this.Marked.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentParam,  IQPFormService, string>>
		{
			{ "MarketingEquipment_ID", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.MarketingEquipment_ID != null ? self.MarketingEquipment_ID.ToString() : null) },
			{ "Group_ID", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.Group_ID != null ? self.Group_ID.ToString() : null) },
			{ "Title", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Value", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "ValueEngl", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.ValueEngl != null ? ctx.ReplacePlaceholders(self.ValueEngl) : null) },
			{ "ValueTat", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.ValueTat != null ? ctx.ReplacePlaceholders(self.ValueTat) : null) },
			{ "ShowInTiles", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.ShowInTiles != null ? self.ShowInTiles.Value ? "1" : "0" : null) },
			{ "Legal", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Order", new Func<EquipmentParam, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean ShowInTilesExact { get { return this.ShowInTiles == null ? default(Boolean) : this.ShowInTiles.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Value = context.ReplacePlaceholders(this.Value);
			this.ValueEngl = context.ReplacePlaceholders(this.ValueEngl);
			this.ValueTat = context.ReplacePlaceholders(this.ValueTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentParamsGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentParamsGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentParamsGroup,  IQPFormService, string>>
		{
			{ "Type_ID", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.Type_ID != null ? self.Type_ID.ToString() : null) },
			{ "Title", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Order", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Legal", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "IsPriceGroup", new Func<EquipmentParamsGroup, IQPFormService, string>((self, ctx) => self.IsPriceGroup != null ? self.IsPriceGroup.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean IsPriceGroupExact { get { return this.IsPriceGroup == null ? default(Boolean) : this.IsPriceGroup.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentParamsGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Equipment: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Equipment, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Equipment,  IQPFormService, string>>
		{
			{ "MarketingEquipment_ID", new Func<Equipment, IQPFormService, string>((self, ctx) => self.MarketingEquipment_ID != null ? self.MarketingEquipment_ID.ToString() : null) },
			{ "Price", new Func<Equipment, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "Benefit", new Func<Equipment, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<Equipment, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<Equipment, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "CreditEnabled", new Func<Equipment, IQPFormService, string>((self, ctx) => self.CreditEnabled != null ? self.CreditEnabled.Value ? "1" : "0" : null) },
			{ "MarketingSign_ID", new Func<Equipment, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "IsArchived", new Func<Equipment, IQPFormService, string>((self, ctx) => self.IsArchived != null ? self.IsArchived.Value ? "1" : "0" : null) },
			{ "Legal", new Func<Equipment, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<Equipment, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<Equipment, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "PdfFile", new Func<Equipment, IQPFormService, string>((self, ctx) => self.PdfFile != null ? self.PdfFile : null) },
			{ "PdfFileEngl", new Func<Equipment, IQPFormService, string>((self, ctx) => self.PdfFileEngl != null ? self.PdfFileEngl : null) },
			{ "PdfFileTat", new Func<Equipment, IQPFormService, string>((self, ctx) => self.PdfFileTat != null ? self.PdfFileTat : null) },
		};

		#endregion
		#region Genarated properties
		public string PdfFileUrl { get; set; }
		public string PdfFileEnglUrl { get; set; }
		public string PdfFileTatUrl { get; set; }
		public string PdfFileUploadPath { get; set; }
		public string PdfFileEnglUploadPath { get; set; }
		public string PdfFileTatUploadPath { get; set; }
		public Int32 PriceExact { get { return this.Price == null ? default(Int32) : this.Price.Value; } }
		public Boolean CreditEnabledExact { get { return this.CreditEnabled == null ? default(Boolean) : this.CreditEnabled.Value; } }
		public Boolean IsArchivedExact { get { return this.IsArchived == null ? default(Boolean) : this.IsArchived.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.PdfFileUrl = context.GetUrl(this.PdfFile, "Equipment", "PdfFile");
			this.PdfFileEnglUrl = context.GetUrl(this.PdfFileEngl, "Equipment", "PdfFileEngl");
			this.PdfFileTatUrl = context.GetUrl(this.PdfFileTat, "Equipment", "PdfFileTat");
			this.PdfFileUploadPath = context.GetUploadPath(this.PdfFile, "Equipment", "PdfFile");
			this.PdfFileEnglUploadPath = context.GetUploadPath(this.PdfFileEngl, "Equipment", "PdfFileEngl");
			this.PdfFileTatUploadPath = context.GetUploadPath(this.PdfFileTat, "Equipment", "PdfFileTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Equipment", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingEquipment: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingEquipment, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingEquipment,  IQPFormService, string>>
		{
			{ "Category_ID", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Category_ID != null ? self.Category_ID.ToString() : null) },
			{ "Title", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Benefit", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "Description", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Price", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "TileImage", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.TileImage != null ? self.TileImage : null) },
			{ "IsApplication", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.IsApplication != null ? self.IsApplication.Value ? "1" : "0" : null) },
			{ "ApplicationIcon", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.ApplicationIcon != null ? self.ApplicationIcon : null) },
			{ "Order", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "MarketingSign_ID", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.MarketingSign_ID != null ? self.MarketingSign_ID.ToString() : null) },
			{ "AppStoreLink", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.AppStoreLink != null ? ctx.ReplacePlaceholders(self.AppStoreLink) : null) },
			{ "GooglePlayLink", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.GooglePlayLink != null ? ctx.ReplacePlaceholders(self.GooglePlayLink) : null) },
			{ "FileToDownload", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.FileToDownload != null ? self.FileToDownload : null) },
			{ "IsArchived", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.IsArchived != null ? self.IsArchived.Value ? "1" : "0" : null) },
			{ "Legal", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "Destination", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Destination != null ? ctx.ReplacePlaceholders(self.Destination) : null) },
			{ "DestinationEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.DestinationEngl != null ? ctx.ReplacePlaceholders(self.DestinationEngl) : null) },
			{ "DestinationTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.DestinationTat != null ? ctx.ReplacePlaceholders(self.DestinationTat) : null) },
			{ "PdfFile", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.PdfFile != null ? self.PdfFile : null) },
			{ "PdfFileEngl", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.PdfFileEngl != null ? self.PdfFileEngl : null) },
			{ "PdfFileTat", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.PdfFileTat != null ? self.PdfFileTat : null) },
			{ "Alias", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "MetaKeywords", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.MetaKeywords != null ? self.MetaKeywords : null) },
			{ "MetaDescription", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? self.MetaDescription : null) },
			{ "TitleFormat_ID", new Func<MarketingEquipment, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string TileImageUrl { get; set; }
		public string ApplicationIconUrl { get; set; }
		public string FileToDownloadUrl { get; set; }
		public string PdfFileUrl { get; set; }
		public string PdfFileEnglUrl { get; set; }
		public string PdfFileTatUrl { get; set; }
		public string TileImageUploadPath { get; set; }
		public string ApplicationIconUploadPath { get; set; }
		public string FileToDownloadUploadPath { get; set; }
		public string PdfFileUploadPath { get; set; }
		public string PdfFileEnglUploadPath { get; set; }
		public string PdfFileTatUploadPath { get; set; }
		public Int32 PriceExact { get { return this.Price == null ? default(Int32) : this.Price.Value; } }
		public Boolean IsApplicationExact { get { return this.IsApplication == null ? default(Boolean) : this.IsApplication.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean IsArchivedExact { get { return this.IsArchived == null ? default(Boolean) : this.IsArchived.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.AppStoreLink = context.ReplacePlaceholders(this.AppStoreLink);
			this.GooglePlayLink = context.ReplacePlaceholders(this.GooglePlayLink);
			this.Destination = context.ReplacePlaceholders(this.Destination);
			this.DestinationEngl = context.ReplacePlaceholders(this.DestinationEngl);
			this.DestinationTat = context.ReplacePlaceholders(this.DestinationTat);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.TileImageUrl = context.GetUrl(this.TileImage, "MarketingEquipment", "TileImage");
			this.ApplicationIconUrl = context.GetUrl(this.ApplicationIcon, "MarketingEquipment", "ApplicationIcon");
			this.FileToDownloadUrl = context.GetUrl(this.FileToDownload, "MarketingEquipment", "FileToDownload");
			this.PdfFileUrl = context.GetUrl(this.PdfFile, "MarketingEquipment", "PdfFile");
			this.PdfFileEnglUrl = context.GetUrl(this.PdfFileEngl, "MarketingEquipment", "PdfFileEngl");
			this.PdfFileTatUrl = context.GetUrl(this.PdfFileTat, "MarketingEquipment", "PdfFileTat");
			this.TileImageUploadPath = context.GetUploadPath(this.TileImage, "MarketingEquipment", "TileImage");
			this.ApplicationIconUploadPath = context.GetUploadPath(this.ApplicationIcon, "MarketingEquipment", "ApplicationIcon");
			this.FileToDownloadUploadPath = context.GetUploadPath(this.FileToDownload, "MarketingEquipment", "FileToDownload");
			this.PdfFileUploadPath = context.GetUploadPath(this.PdfFile, "MarketingEquipment", "PdfFile");
			this.PdfFileEnglUploadPath = context.GetUploadPath(this.PdfFileEngl, "MarketingEquipment", "PdfFileEngl");
			this.PdfFileTatUploadPath = context.GetUploadPath(this.PdfFileTat, "MarketingEquipment", "PdfFileTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingEquipment", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class EquipmentImage: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<EquipmentImage, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<EquipmentImage,  IQPFormService, string>>
		{
			{ "ImageFile", new Func<EquipmentImage, IQPFormService, string>((self, ctx) => self.ImageFile != null ? self.ImageFile : null) },
			{ "Order", new Func<EquipmentImage, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "PreviewFile", new Func<EquipmentImage, IQPFormService, string>((self, ctx) => self.PreviewFile != null ? self.PreviewFile : null) },
		};

		#endregion
		#region Genarated properties
		public string ImageFileUrl { get; set; }
		public string PreviewFileUrl { get; set; }
		public string ImageFileUploadPath { get; set; }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.ImageFileUrl = context.GetUrl(this.ImageFile, "EquipmentImage", "ImageFile");
			this.PreviewFileUrl = context.GetUrl(this.PreviewFile, "EquipmentImage", "PreviewFile");
			this.ImageFileUploadPath = context.GetUploadPath(this.ImageFile, "EquipmentImage", "ImageFile");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("EquipmentImage", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PaymentServiceFilter: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PaymentServiceFilter, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PaymentServiceFilter,  IQPFormService, string>>
		{
			{ "Title", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "UrlTitle", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.UrlTitle != null ? ctx.ReplacePlaceholders(self.UrlTitle) : null) },
			{ "HasPaymentForm", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.HasPaymentForm != null ? self.HasPaymentForm.Value ? "1" : "0" : null) },
			{ "ServiceBlockText", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.ServiceBlockText != null ? ctx.ReplacePlaceholders(self.ServiceBlockText) : null) },
			{ "ServiceBlockTextEngl", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.ServiceBlockTextEngl != null ? ctx.ReplacePlaceholders(self.ServiceBlockTextEngl) : null) },
			{ "ServiceBlockTextTat", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.ServiceBlockTextTat != null ? ctx.ReplacePlaceholders(self.ServiceBlockTextTat) : null) },
			{ "Order", new Func<PaymentServiceFilter, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean HasPaymentFormExact { get { return this.HasPaymentForm == null ? default(Boolean) : this.HasPaymentForm.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.UrlTitle = context.ReplacePlaceholders(this.UrlTitle);
			this.ServiceBlockText = context.ReplacePlaceholders(this.ServiceBlockText);
			this.ServiceBlockTextEngl = context.ReplacePlaceholders(this.ServiceBlockTextEngl);
			this.ServiceBlockTextTat = context.ReplacePlaceholders(this.ServiceBlockTextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PaymentServiceFilter", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class INACParamType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<INACParamType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<INACParamType,  IQPFormService, string>>
		{
			{ "Title", new Func<INACParamType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("INACParamType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class InternetTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<InternetTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<InternetTariff,  IQPFormService, string>>
		{
			{ "MarketingTariff_ID", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.MarketingTariff_ID != null ? self.MarketingTariff_ID.ToString() : null) },
			{ "Price", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "TransferPrice", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.TransferPrice != null ? self.TransferPrice.ToString() : null) },
			{ "SubscriptionFee", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.SubscriptionFee != null ? self.SubscriptionFee.ToString() : null) },
			{ "SubscriptionFeeType_ID", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.SubscriptionFeeType_ID != null ? self.SubscriptionFeeType_ID.ToString() : null) },
			{ "PDF", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.PDF != null ? self.PDF : null) },
			{ "PDFEngl", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.PDFEngl != null ? self.PDFEngl : null) },
			{ "PDFTat", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.PDFTat != null ? self.PDFTat : null) },
			{ "IsArchive", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "SortOrder", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "INACID", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.INACID != null ? ctx.ReplacePlaceholders(self.INACID) : null) },
			{ "Benefit", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "FamilyIcon", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "Time", new Func<InternetTariff, IQPFormService, string>((self, ctx) => self.Time != null ? self.Time.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string PDFUrl { get; set; }
		public string PDFEnglUrl { get; set; }
		public string PDFTatUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string PDFUploadPath { get; set; }
		public string PDFEnglUploadPath { get; set; }
		public string PDFTatUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Double PriceExact { get { return this.Price == null ? default(Double) : this.Price.Value; } }
		public Double TransferPriceExact { get { return this.TransferPrice == null ? default(Double) : this.TransferPrice.Value; } }
		public Double SubscriptionFeeExact { get { return this.SubscriptionFee == null ? default(Double) : this.SubscriptionFee.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.INACID = context.ReplacePlaceholders(this.INACID);
			this.PDFUrl = context.GetUrl(this.PDF, "InternetTariff", "PDF");
			this.PDFEnglUrl = context.GetUrl(this.PDFEngl, "InternetTariff", "PDFEngl");
			this.PDFTatUrl = context.GetUrl(this.PDFTat, "InternetTariff", "PDFTat");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "InternetTariff", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "InternetTariff", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "InternetTariff", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "InternetTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "InternetTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "InternetTariff", "FamilyIconHoverTat");
			this.PDFUploadPath = context.GetUploadPath(this.PDF, "InternetTariff", "PDF");
			this.PDFEnglUploadPath = context.GetUploadPath(this.PDFEngl, "InternetTariff", "PDFEngl");
			this.PDFTatUploadPath = context.GetUploadPath(this.PDFTat, "InternetTariff", "PDFTat");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "InternetTariff", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "InternetTariff", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "InternetTariff", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "InternetTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "InternetTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "InternetTariff", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("InternetTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class InternetTariffParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<InternetTariffParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<InternetTariffParam,  IQPFormService, string>>
		{
			{ "Tariff_ID", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "Group_ID", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.Group_ID != null ? self.Group_ID.ToString() : null) },
			{ "Text", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Value", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "TextEngl", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "ValueEngl", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.ValueEngl != null ? ctx.ReplacePlaceholders(self.ValueEngl) : null) },
			{ "ValueTat", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.ValueTat != null ? ctx.ReplacePlaceholders(self.ValueTat) : null) },
			{ "MainInCard", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.MainInCard != null ? self.MainInCard.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "Legal", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "SortOrder", new Func<InternetTariffParam, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean MainInCardExact { get { return this.MainInCard == null ? default(Boolean) : this.MainInCard.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
			this.Value = context.ReplacePlaceholders(this.Value);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.ValueEngl = context.ReplacePlaceholders(this.ValueEngl);
			this.ValueTat = context.ReplacePlaceholders(this.ValueTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("InternetTariffParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneTariff,  IQPFormService, string>>
		{
			{ "MarketingTariff_ID", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.MarketingTariff_ID != null ? self.MarketingTariff_ID.ToString() : null) },
			{ "Price", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "TransferPrice", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.TransferPrice != null ? self.TransferPrice.ToString() : null) },
			{ "SubscriptionFee", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.SubscriptionFee != null ? self.SubscriptionFee.ToString() : null) },
			{ "SubscriptionFeeType_ID", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.SubscriptionFeeType_ID != null ? self.SubscriptionFeeType_ID.ToString() : null) },
			{ "PDF", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.PDF != null ? self.PDF : null) },
			{ "PDFEngl", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.PDFEngl != null ? self.PDFEngl : null) },
			{ "PDFTat", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.PDFTat != null ? self.PDFTat : null) },
			{ "IsArchive", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "SortOrder", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "INACID", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.INACID != null ? ctx.ReplacePlaceholders(self.INACID) : null) },
			{ "Benefit", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "FamilyIcon", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<PhoneTariff, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
		};

		#endregion
		#region Genarated properties
		public string PDFUrl { get; set; }
		public string PDFEnglUrl { get; set; }
		public string PDFTatUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string PDFUploadPath { get; set; }
		public string PDFEnglUploadPath { get; set; }
		public string PDFTatUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Double PriceExact { get { return this.Price == null ? default(Double) : this.Price.Value; } }
		public Double TransferPriceExact { get { return this.TransferPrice == null ? default(Double) : this.TransferPrice.Value; } }
		public Double SubscriptionFeeExact { get { return this.SubscriptionFee == null ? default(Double) : this.SubscriptionFee.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.INACID = context.ReplacePlaceholders(this.INACID);
			this.PDFUrl = context.GetUrl(this.PDF, "PhoneTariff", "PDF");
			this.PDFEnglUrl = context.GetUrl(this.PDFEngl, "PhoneTariff", "PDFEngl");
			this.PDFTatUrl = context.GetUrl(this.PDFTat, "PhoneTariff", "PDFTat");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "PhoneTariff", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "PhoneTariff", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "PhoneTariff", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "PhoneTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "PhoneTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "PhoneTariff", "FamilyIconHoverTat");
			this.PDFUploadPath = context.GetUploadPath(this.PDF, "PhoneTariff", "PDF");
			this.PDFEnglUploadPath = context.GetUploadPath(this.PDFEngl, "PhoneTariff", "PDFEngl");
			this.PDFTatUploadPath = context.GetUploadPath(this.PDFTat, "PhoneTariff", "PDFTat");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "PhoneTariff", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "PhoneTariff", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "PhoneTariff", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "PhoneTariff", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "PhoneTariff", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "PhoneTariff", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class PhoneTariffParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<PhoneTariffParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PhoneTariffParam,  IQPFormService, string>>
		{
			{ "Tariff_ID", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.Tariff_ID != null ? self.Tariff_ID.ToString() : null) },
			{ "Group_ID", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.Group_ID != null ? self.Group_ID.ToString() : null) },
			{ "Text", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "Value", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "ValueEngl", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.ValueEngl != null ? ctx.ReplacePlaceholders(self.ValueEngl) : null) },
			{ "ValueTat", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.ValueTat != null ? ctx.ReplacePlaceholders(self.ValueTat) : null) },
			{ "MainInCard", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.MainInCard != null ? self.MainInCard.Value ? "1" : "0" : null) },
			{ "ShowInTile", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.ShowInTile != null ? self.ShowInTile.Value ? "1" : "0" : null) },
			{ "Legal", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "SortOrder", new Func<PhoneTariffParam, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean MainInCardExact { get { return this.MainInCard == null ? default(Boolean) : this.MainInCard.Value; } }
		public Boolean ShowInTileExact { get { return this.ShowInTile == null ? default(Boolean) : this.ShowInTile.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.Value = context.ReplacePlaceholders(this.Value);
			this.ValueEngl = context.ReplacePlaceholders(this.ValueEngl);
			this.ValueTat = context.ReplacePlaceholders(this.ValueTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PhoneTariffParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class DiagnoseItem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<DiagnoseItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<DiagnoseItem,  IQPFormService, string>>
		{
			{ "Title", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "ItemType", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.ItemType != null ? ctx.ReplacePlaceholders(self.ItemType) : null) },
			{ "Order", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "LinkedItems_ID", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.LinkedItems_ID != null ? self.LinkedItems_ID.ToString() : null) },
			{ "Instruction", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.Instruction != null ? ctx.ReplacePlaceholders(self.Instruction) : null) },
			{ "ShowStandardText", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.ShowStandardText != null ? self.ShowStandardText.Value ? "1" : "0" : null) },
			{ "PdfInstruction", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.PdfInstruction != null ? self.PdfInstruction : null) },
			{ "TitleEng", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.TitleEng != null ? ctx.ReplacePlaceholders(self.TitleEng) : null) },
			{ "TitleTat", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "InstructionEng", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.InstructionEng != null ? ctx.ReplacePlaceholders(self.InstructionEng) : null) },
			{ "PdfInstructionEng", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.PdfInstructionEng != null ? self.PdfInstructionEng : null) },
			{ "PdfInstructionTat", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.PdfInstructionTat != null ? self.PdfInstructionTat : null) },
			{ "InstructionTat", new Func<DiagnoseItem, IQPFormService, string>((self, ctx) => self.InstructionTat != null ? ctx.ReplacePlaceholders(self.InstructionTat) : null) },
		};

		#endregion
		#region Genarated properties
		public string PdfInstructionUrl { get; set; }
		public string PdfInstructionEngUrl { get; set; }
		public string PdfInstructionTatUrl { get; set; }
		public string PdfInstructionUploadPath { get; set; }
		public string PdfInstructionEngUploadPath { get; set; }
		public string PdfInstructionTatUploadPath { get; set; }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean ShowStandardTextExact { get { return this.ShowStandardText == null ? default(Boolean) : this.ShowStandardText.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.ItemType = context.ReplacePlaceholders(this.ItemType);
			this.Instruction = context.ReplacePlaceholders(this.Instruction);
			this.TitleEng = context.ReplacePlaceholders(this.TitleEng);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.InstructionEng = context.ReplacePlaceholders(this.InstructionEng);
			this.InstructionTat = context.ReplacePlaceholders(this.InstructionTat);
			this.PdfInstructionUrl = context.GetUrl(this.PdfInstruction, "DiagnoseItem", "PdfInstruction");
			this.PdfInstructionEngUrl = context.GetUrl(this.PdfInstructionEng, "DiagnoseItem", "PdfInstructionEng");
			this.PdfInstructionTatUrl = context.GetUrl(this.PdfInstructionTat, "DiagnoseItem", "PdfInstructionTat");
			this.PdfInstructionUploadPath = context.GetUploadPath(this.PdfInstruction, "DiagnoseItem", "PdfInstruction");
			this.PdfInstructionEngUploadPath = context.GetUploadPath(this.PdfInstructionEng, "DiagnoseItem", "PdfInstructionEng");
			this.PdfInstructionTatUploadPath = context.GetUploadPath(this.PdfInstructionTat, "DiagnoseItem", "PdfInstructionTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("DiagnoseItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MutualTVPackageGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MutualTVPackageGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MutualTVPackageGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<MutualTVPackageGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MutualTVPackageGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TVPackageCategory: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TVPackageCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TVPackageCategory,  IQPFormService, string>>
		{
			{ "Title", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "TitleEngl", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "DescriptionEngl", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? self.DescriptionEngl : null) },
			{ "TitleTat", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionTat", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? self.DescriptionTat : null) },
			{ "CheckConnectionAvailable", new Func<TVPackageCategory, IQPFormService, string>((self, ctx) => self.CheckConnectionAvailable != null ? self.CheckConnectionAvailable.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean CheckConnectionAvailableExact { get { return this.CheckConnectionAvailable == null ? default(Boolean) : this.CheckConnectionAvailable.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TVPackageCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodServiceParamTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodServiceParamTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodServiceParamTab,  IQPFormService, string>>
		{
			{ "Title", new Func<ProvodServiceParamTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<ProvodServiceParamTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ProvodServiceParamTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodServiceParamTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ParamTabInProvodService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ParamTabInProvodService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ParamTabInProvodService,  IQPFormService, string>>
		{
			{ "MarketingService_ID", new Func<ParamTabInProvodService, IQPFormService, string>((self, ctx) => self.MarketingService_ID != null ? self.MarketingService_ID.ToString() : null) },
			{ "ParamGroup_ID", new Func<ParamTabInProvodService, IQPFormService, string>((self, ctx) => self.ParamGroup_ID != null ? self.ParamGroup_ID.ToString() : null) },
			{ "Tab_ID", new Func<ParamTabInProvodService, IQPFormService, string>((self, ctx) => self.Tab_ID != null ? self.Tab_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ParamTabInProvodService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodServiceParam: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodServiceParam, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodServiceParam,  IQPFormService, string>>
		{
			{ "Text", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "Value", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "ValueEngl", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.ValueEngl != null ? ctx.ReplacePlaceholders(self.ValueEngl) : null) },
			{ "ValueTat", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.ValueTat != null ? ctx.ReplacePlaceholders(self.ValueTat) : null) },
			{ "Legal", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "ProvodService_ID", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.ProvodService_ID != null ? self.ProvodService_ID.ToString() : null) },
			{ "ParamGroup_ID", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.ParamGroup_ID != null ? self.ParamGroup_ID.ToString() : null) },
			{ "Parent_ID", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "SortOrder", new Func<ProvodServiceParam, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.Value = context.ReplacePlaceholders(this.Value);
			this.ValueEngl = context.ReplacePlaceholders(this.ValueEngl);
			this.ValueTat = context.ReplacePlaceholders(this.ValueTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodServiceParam", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class DiagnoseStatisticItem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<DiagnoseStatisticItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<DiagnoseStatisticItem,  IQPFormService, string>>
		{
			{ "Title", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Version", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.Version != null ? ctx.ReplacePlaceholders(self.Version) : null) },
			{ "Helped", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.Helped != null ? self.Helped.ToString() : null) },
			{ "NotHelped", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.NotHelped != null ? self.NotHelped.ToString() : null) },
			{ "Difference", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.Difference != null ? self.Difference.ToString() : null) },
			{ "Amount", new Func<DiagnoseStatisticItem, IQPFormService, string>((self, ctx) => self.Amount != null ? self.Amount.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int64 HelpedExact { get { return this.Helped == null ? default(Int64) : this.Helped.Value; } }
		public Int64 NotHelpedExact { get { return this.NotHelped == null ? default(Int64) : this.NotHelped.Value; } }
		public Int32 DifferenceExact { get { return this.Difference == null ? default(Int32) : this.Difference.Value; } }
		public Int32 AmountExact { get { return this.Amount == null ? default(Int32) : this.Amount.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Version = context.ReplacePlaceholders(this.Version);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("DiagnoseStatisticItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RoamingCountryGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RoamingCountryGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RoamingCountryGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<RoamingCountryGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<RoamingCountryGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<RoamingCountryGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RoamingCountryGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RoamingRegionFriendGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RoamingRegionFriendGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RoamingRegionFriendGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<RoamingRegionFriendGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RoamingRegionFriendGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SukkRegionFriend: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SukkRegionFriend, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SukkRegionFriend,  IQPFormService, string>>
		{
			{ "Group_ID", new Func<SukkRegionFriend, IQPFormService, string>((self, ctx) => self.Group_ID != null ? self.Group_ID.ToString() : null) },
			{ "Region_ID", new Func<SukkRegionFriend, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 Region_IDExact { get { return this.Region_ID == null ? default(Int32) : this.Region_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SukkRegionFriend", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SukkCountryInGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SukkCountryInGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SukkCountryInGroup,  IQPFormService, string>>
		{
			{ "Groups_ID", new Func<SukkCountryInGroup, IQPFormService, string>((self, ctx) => self.Groups_ID != null ? self.Groups_ID.ToString() : null) },
			{ "Country_ID", new Func<SukkCountryInGroup, IQPFormService, string>((self, ctx) => self.Country_ID != null ? self.Country_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 Country_IDExact { get { return this.Country_ID == null ? default(Int32) : this.Country_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SukkCountryInGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SukkToMarketingRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SukkToMarketingRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SukkToMarketingRegion,  IQPFormService, string>>
		{
			{ "MarketingRegion_ID", new Func<SukkToMarketingRegion, IQPFormService, string>((self, ctx) => self.MarketingRegion_ID != null ? self.MarketingRegion_ID.ToString() : null) },
			{ "SukkRegion_ID", new Func<SukkToMarketingRegion, IQPFormService, string>((self, ctx) => self.SukkRegion_ID != null ? self.SukkRegion_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 SukkRegion_IDExact { get { return this.SukkRegion_ID == null ? default(Int32) : this.SukkRegion_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SukkToMarketingRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SetupConnectionTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SetupConnectionTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SetupConnectionTab,  IQPFormService, string>>
		{
			{ "Title", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Description", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "DescriptionEngl", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "Index", new Func<SetupConnectionTab, IQPFormService, string>((self, ctx) => self.Index != null ? self.Index.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 IndexExact { get { return this.Index == null ? default(Int32) : this.Index.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SetupConnectionTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SetupConnectionGoal: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SetupConnectionGoal, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SetupConnectionGoal,  IQPFormService, string>>
		{
			{ "Title", new Func<SetupConnectionGoal, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Index", new Func<SetupConnectionGoal, IQPFormService, string>((self, ctx) => self.Index != null ? self.Index.ToString() : null) },
			{ "TitleEngl", new Func<SetupConnectionGoal, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<SetupConnectionGoal, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 IndexExact { get { return this.Index == null ? default(Int32) : this.Index.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SetupConnectionGoal", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SetupConnectionInstruction: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SetupConnectionInstruction, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SetupConnectionInstruction,  IQPFormService, string>>
		{
			{ "Title", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "File", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.File != null ? self.File : null) },
			{ "Content", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.Content != null ? ctx.ReplacePlaceholders(self.Content) : null) },
			{ "System_ID", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.System_ID != null ? self.System_ID.ToString() : null) },
			{ "Goal_ID", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.Goal_ID != null ? self.Goal_ID.ToString() : null) },
			{ "Wizard", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.Wizard != null ? self.Wizard : null) },
			{ "FileEngl", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.FileEngl != null ? self.FileEngl : null) },
			{ "FileTat", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.FileTat != null ? self.FileTat : null) },
			{ "Tab_ID", new Func<SetupConnectionInstruction, IQPFormService, string>((self, ctx) => self.Tab_ID != null ? self.Tab_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public string FileUrl { get; set; }
		public string WizardUrl { get; set; }
		public string FileEnglUrl { get; set; }
		public string FileTatUrl { get; set; }
		public string FileUploadPath { get; set; }
		public string WizardUploadPath { get; set; }
		public string FileEnglUploadPath { get; set; }
		public string FileTatUploadPath { get; set; }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Content = context.ReplacePlaceholders(this.Content);
			this.FileUrl = context.GetUrl(this.File, "SetupConnectionInstruction", "File");
			this.WizardUrl = context.GetUrl(this.Wizard, "SetupConnectionInstruction", "Wizard");
			this.FileEnglUrl = context.GetUrl(this.FileEngl, "SetupConnectionInstruction", "FileEngl");
			this.FileTatUrl = context.GetUrl(this.FileTat, "SetupConnectionInstruction", "FileTat");
			this.FileUploadPath = context.GetUploadPath(this.File, "SetupConnectionInstruction", "File");
			this.WizardUploadPath = context.GetUploadPath(this.Wizard, "SetupConnectionInstruction", "Wizard");
			this.FileEnglUploadPath = context.GetUploadPath(this.FileEngl, "SetupConnectionInstruction", "FileEngl");
			this.FileTatUploadPath = context.GetUploadPath(this.FileTat, "SetupConnectionInstruction", "FileTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SetupConnectionInstruction", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ProvodService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ProvodService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ProvodService,  IQPFormService, string>>
		{
			{ "MarketingService_ID", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.MarketingService_ID != null ? self.MarketingService_ID.ToString() : null) },
			{ "Price", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.Price != null ? self.Price.ToString() : null) },
			{ "SubscriptionFee", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.SubscriptionFee != null ? self.SubscriptionFee.ToString() : null) },
			{ "SubscriptionFeeType_ID", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.SubscriptionFeeType_ID != null ? self.SubscriptionFeeType_ID.ToString() : null) },
			{ "PDF", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.PDF != null ? self.PDF : null) },
			{ "PDFEngl", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.PDFEngl != null ? self.PDFEngl : null) },
			{ "PDFTat", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.PDFTat != null ? self.PDFTat : null) },
			{ "IsArchive", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.IsArchive != null ? self.IsArchive.Value ? "1" : "0" : null) },
			{ "SortOrder", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
			{ "Legal", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.Legal != null ? self.Legal : null) },
			{ "LegalEngl", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.LegalEngl != null ? self.LegalEngl : null) },
			{ "LegalTat", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.LegalTat != null ? self.LegalTat : null) },
			{ "INACID", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.INACID != null ? ctx.ReplacePlaceholders(self.INACID) : null) },
			{ "Benefit", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.Benefit != null ? self.Benefit : null) },
			{ "BenefitEngl", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.BenefitEngl != null ? self.BenefitEngl : null) },
			{ "BenefitTat", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.BenefitTat != null ? self.BenefitTat : null) },
			{ "DiscountArray", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountArray != null ? ctx.ReplacePlaceholders(self.DiscountArray) : null) },
			{ "FamilyIcon", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIcon != null ? self.FamilyIcon : null) },
			{ "FamilyIconEngl", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconEngl != null ? self.FamilyIconEngl : null) },
			{ "FamilyIconTat", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconTat != null ? self.FamilyIconTat : null) },
			{ "FamilyIconHover", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHover != null ? self.FamilyIconHover : null) },
			{ "FamilyIconHoverEngl", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverEngl != null ? self.FamilyIconHoverEngl : null) },
			{ "FamilyIconHoverTat", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.FamilyIconHoverTat != null ? self.FamilyIconHoverTat : null) },
			{ "DiscountsByMonths", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsByMonths != null ? ctx.ReplacePlaceholders(self.DiscountsByMonths) : null) },
			{ "DiscountsText1", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsText1 != null ? ctx.ReplacePlaceholders(self.DiscountsText1) : null) },
			{ "DiscountsValue1", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsValue1 != null ? ctx.ReplacePlaceholders(self.DiscountsValue1) : null) },
			{ "DiscountsText2", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsText2 != null ? ctx.ReplacePlaceholders(self.DiscountsText2) : null) },
			{ "DiscountsValue2", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsValue2 != null ? ctx.ReplacePlaceholders(self.DiscountsValue2) : null) },
			{ "DiscountsText3", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsText3 != null ? ctx.ReplacePlaceholders(self.DiscountsText3) : null) },
			{ "DiscountsValue3", new Func<ProvodService, IQPFormService, string>((self, ctx) => self.DiscountsValue3 != null ? ctx.ReplacePlaceholders(self.DiscountsValue3) : null) },
		};

		#endregion
		#region Genarated properties
		public string PDFUrl { get; set; }
		public string PDFEnglUrl { get; set; }
		public string PDFTatUrl { get; set; }
		public string FamilyIconUrl { get; set; }
		public string FamilyIconEnglUrl { get; set; }
		public string FamilyIconTatUrl { get; set; }
		public string FamilyIconHoverUrl { get; set; }
		public string FamilyIconHoverEnglUrl { get; set; }
		public string FamilyIconHoverTatUrl { get; set; }
		public string PDFUploadPath { get; set; }
		public string PDFEnglUploadPath { get; set; }
		public string PDFTatUploadPath { get; set; }
		public string FamilyIconUploadPath { get; set; }
		public string FamilyIconEnglUploadPath { get; set; }
		public string FamilyIconTatUploadPath { get; set; }
		public string FamilyIconHoverUploadPath { get; set; }
		public string FamilyIconHoverEnglUploadPath { get; set; }
		public string FamilyIconHoverTatUploadPath { get; set; }
		public Double PriceExact { get { return this.Price == null ? default(Double) : this.Price.Value; } }
		public Double SubscriptionFeeExact { get { return this.SubscriptionFee == null ? default(Double) : this.SubscriptionFee.Value; } }
		public Boolean IsArchiveExact { get { return this.IsArchive == null ? default(Boolean) : this.IsArchive.Value; } }
		public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.INACID = context.ReplacePlaceholders(this.INACID);
			this.DiscountArray = context.ReplacePlaceholders(this.DiscountArray);
			this.DiscountsByMonths = context.ReplacePlaceholders(this.DiscountsByMonths);
			this.DiscountsText1 = context.ReplacePlaceholders(this.DiscountsText1);
			this.DiscountsValue1 = context.ReplacePlaceholders(this.DiscountsValue1);
			this.DiscountsText2 = context.ReplacePlaceholders(this.DiscountsText2);
			this.DiscountsValue2 = context.ReplacePlaceholders(this.DiscountsValue2);
			this.DiscountsText3 = context.ReplacePlaceholders(this.DiscountsText3);
			this.DiscountsValue3 = context.ReplacePlaceholders(this.DiscountsValue3);
			this.PDFUrl = context.GetUrl(this.PDF, "ProvodService", "PDF");
			this.PDFEnglUrl = context.GetUrl(this.PDFEngl, "ProvodService", "PDFEngl");
			this.PDFTatUrl = context.GetUrl(this.PDFTat, "ProvodService", "PDFTat");
			this.FamilyIconUrl = context.GetUrl(this.FamilyIcon, "ProvodService", "FamilyIcon");
			this.FamilyIconEnglUrl = context.GetUrl(this.FamilyIconEngl, "ProvodService", "FamilyIconEngl");
			this.FamilyIconTatUrl = context.GetUrl(this.FamilyIconTat, "ProvodService", "FamilyIconTat");
			this.FamilyIconHoverUrl = context.GetUrl(this.FamilyIconHover, "ProvodService", "FamilyIconHover");
			this.FamilyIconHoverEnglUrl = context.GetUrl(this.FamilyIconHoverEngl, "ProvodService", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUrl = context.GetUrl(this.FamilyIconHoverTat, "ProvodService", "FamilyIconHoverTat");
			this.PDFUploadPath = context.GetUploadPath(this.PDF, "ProvodService", "PDF");
			this.PDFEnglUploadPath = context.GetUploadPath(this.PDFEngl, "ProvodService", "PDFEngl");
			this.PDFTatUploadPath = context.GetUploadPath(this.PDFTat, "ProvodService", "PDFTat");
			this.FamilyIconUploadPath = context.GetUploadPath(this.FamilyIcon, "ProvodService", "FamilyIcon");
			this.FamilyIconEnglUploadPath = context.GetUploadPath(this.FamilyIconEngl, "ProvodService", "FamilyIconEngl");
			this.FamilyIconTatUploadPath = context.GetUploadPath(this.FamilyIconTat, "ProvodService", "FamilyIconTat");
			this.FamilyIconHoverUploadPath = context.GetUploadPath(this.FamilyIconHover, "ProvodService", "FamilyIconHover");
			this.FamilyIconHoverEnglUploadPath = context.GetUploadPath(this.FamilyIconHoverEngl, "ProvodService", "FamilyIconHoverEngl");
			this.FamilyIconHoverTatUploadPath = context.GetUploadPath(this.FamilyIconHoverTat, "ProvodService", "FamilyIconHoverTat");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ProvodService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class WordForm: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<WordForm, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<WordForm,  IQPFormService, string>>
		{
			{ "Key", new Func<WordForm, IQPFormService, string>((self, ctx) => self.Key != null ? ctx.ReplacePlaceholders(self.Key) : null) },
			{ "Description", new Func<WordForm, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "EngPlural", new Func<WordForm, IQPFormService, string>((self, ctx) => self.EngPlural != null ? ctx.ReplacePlaceholders(self.EngPlural) : null) },
			{ "EngSingular", new Func<WordForm, IQPFormService, string>((self, ctx) => self.EngSingular != null ? ctx.ReplacePlaceholders(self.EngSingular) : null) },
			{ "TatSingular", new Func<WordForm, IQPFormService, string>((self, ctx) => self.TatSingular != null ? ctx.ReplacePlaceholders(self.TatSingular) : null) },
			{ "RusFirstPlural", new Func<WordForm, IQPFormService, string>((self, ctx) => self.RusFirstPlural != null ? ctx.ReplacePlaceholders(self.RusFirstPlural) : null) },
			{ "RusSecondPlural", new Func<WordForm, IQPFormService, string>((self, ctx) => self.RusSecondPlural != null ? ctx.ReplacePlaceholders(self.RusSecondPlural) : null) },
			{ "RusThirdPlural", new Func<WordForm, IQPFormService, string>((self, ctx) => self.RusThirdPlural != null ? ctx.ReplacePlaceholders(self.RusThirdPlural) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Key = context.ReplacePlaceholders(this.Key);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.EngPlural = context.ReplacePlaceholders(this.EngPlural);
			this.EngSingular = context.ReplacePlaceholders(this.EngSingular);
			this.TatSingular = context.ReplacePlaceholders(this.TatSingular);
			this.RusFirstPlural = context.ReplacePlaceholders(this.RusFirstPlural);
			this.RusSecondPlural = context.ReplacePlaceholders(this.RusSecondPlural);
			this.RusThirdPlural = context.ReplacePlaceholders(this.RusThirdPlural);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("WordForm", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ServiceForTVPackage: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ServiceForTVPackage, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ServiceForTVPackage,  IQPFormService, string>>
		{
			{ "TVPackage_ID", new Func<ServiceForTVPackage, IQPFormService, string>((self, ctx) => self.TVPackage_ID != null ? self.TVPackage_ID.ToString() : null) },
			{ "Service_ID", new Func<ServiceForTVPackage, IQPFormService, string>((self, ctx) => self.Service_ID != null ? self.Service_ID.ToString() : null) },
			{ "IncludedByDefault", new Func<ServiceForTVPackage, IQPFormService, string>((self, ctx) => self.IncludedByDefault != null ? self.IncludedByDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IncludedByDefaultExact { get { return this.IncludedByDefault == null ? default(Boolean) : this.IncludedByDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ServiceForTVPackage", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QP_TrusteePayment: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QP_TrusteePayment, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QP_TrusteePayment,  IQPFormService, string>>
		{
			{ "Range", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.Range != null ? ctx.ReplacePlaceholders(self.Range) : null) },
			{ "Sum", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.Sum != null ? ctx.ReplacePlaceholders(self.Sum) : null) },
			{ "MinBalance", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.MinBalance != null ? ctx.ReplacePlaceholders(self.MinBalance) : null) },
			{ "Regions_ID", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.Regions_ID != null ? self.Regions_ID.ToString() : null) },
			{ "Order", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "InnerTab_ID", new Func<QP_TrusteePayment, IQPFormService, string>((self, ctx) => self.InnerTab_ID != null ? self.InnerTab_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Range = context.ReplacePlaceholders(this.Range);
			this.Sum = context.ReplacePlaceholders(this.Sum);
			this.MinBalance = context.ReplacePlaceholders(this.MinBalance);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QP_TrusteePayment", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class QP_TrusteePaymentTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<QP_TrusteePaymentTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QP_TrusteePaymentTab,  IQPFormService, string>>
		{
			{ "Title", new Func<QP_TrusteePaymentTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QP_TrusteePaymentTab, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "MinBalance", new Func<QP_TrusteePaymentTab, IQPFormService, string>((self, ctx) => self.MinBalance != null ? ctx.ReplacePlaceholders(self.MinBalance) : null) },
			{ "IsDefault", new Func<QP_TrusteePaymentTab, IQPFormService, string>((self, ctx) => self.IsDefault != null ? self.IsDefault.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsDefaultExact { get { return this.IsDefault == null ? default(Boolean) : this.IsDefault.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.MinBalance = context.ReplacePlaceholders(this.MinBalance);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QP_TrusteePaymentTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SearchAnnouncement: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SearchAnnouncement, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SearchAnnouncement,  IQPFormService, string>>
		{
			{ "Title", new Func<SearchAnnouncement, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Url", new Func<SearchAnnouncement, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
			{ "Text", new Func<SearchAnnouncement, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Keywords", new Func<SearchAnnouncement, IQPFormService, string>((self, ctx) => self.Keywords != null ? self.Keywords : null) },
			{ "ShowAlways", new Func<SearchAnnouncement, IQPFormService, string>((self, ctx) => self.ShowAlways != null ? self.ShowAlways.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean ShowAlwaysExact { get { return this.ShowAlways == null ? default(Boolean) : this.ShowAlways.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Url = context.ReplacePlaceholders(this.Url);
			this.Text = context.ReplacePlaceholders(this.Text);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SearchAnnouncement", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class WarrantyService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<WarrantyService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<WarrantyService,  IQPFormService, string>>
		{
			{ "Title", new Func<WarrantyService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Order", new Func<WarrantyService, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Address", new Func<WarrantyService, IQPFormService, string>((self, ctx) => self.Address != null ? ctx.ReplacePlaceholders(self.Address) : null) },
			{ "Schedule", new Func<WarrantyService, IQPFormService, string>((self, ctx) => self.Schedule != null ? ctx.ReplacePlaceholders(self.Schedule) : null) },
			{ "Phone", new Func<WarrantyService, IQPFormService, string>((self, ctx) => self.Phone != null ? ctx.ReplacePlaceholders(self.Phone) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Address = context.ReplacePlaceholders(this.Address);
			this.Schedule = context.ReplacePlaceholders(this.Schedule);
			this.Phone = context.ReplacePlaceholders(this.Phone);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("WarrantyService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SKADType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SKADType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SKADType,  IQPFormService, string>>
		{
			{ "Title", new Func<SKADType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SKADType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SKADService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SKADService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SKADService,  IQPFormService, string>>
		{
			{ "Title", new Func<SKADService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SKADService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SKADSpeciality: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SKADSpeciality, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SKADSpeciality,  IQPFormService, string>>
		{
			{ "Title", new Func<SKADSpeciality, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SKADSpeciality", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SalesPointParameter: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SalesPointParameter, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SalesPointParameter,  IQPFormService, string>>
		{
			{ "Title", new Func<SalesPointParameter, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Services", new Func<SalesPointParameter, IQPFormService, string>((self, ctx) => self.Services != null ? self.Services : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SalesPointParameter", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SalesPointType: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SalesPointType, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SalesPointType,  IQPFormService, string>>
		{
			{ "Title", new Func<SalesPointType, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SKADType_ID", new Func<SalesPointType, IQPFormService, string>((self, ctx) => self.SKADType_ID != null ? self.SKADType_ID.ToString() : null) },
			{ "Order", new Func<SalesPointType, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SalesPointType", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SalesPointSpeciality: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SalesPointSpeciality, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SalesPointSpeciality,  IQPFormService, string>>
		{
			{ "Title", new Func<SalesPointSpeciality, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SKADSpeciality_ID", new Func<SalesPointSpeciality, IQPFormService, string>((self, ctx) => self.SKADSpeciality_ID != null ? self.SKADSpeciality_ID.ToString() : null) },
			{ "Order", new Func<SalesPointSpeciality, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SalesPointSpeciality", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SalesPointService: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SalesPointService, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SalesPointService,  IQPFormService, string>>
		{
			{ "Title", new Func<SalesPointService, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SKADService_ID", new Func<SalesPointService, IQPFormService, string>((self, ctx) => self.SKADService_ID != null ? self.SKADService_ID.ToString() : null) },
			{ "Order", new Func<SalesPointService, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SalesPointService", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class TargetUser: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<TargetUser, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TargetUser,  IQPFormService, string>>
		{
			{ "Title", new Func<TargetUser, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<TargetUser, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<TargetUser, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TargetUser", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackSubthemeGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackSubthemeGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackSubthemeGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackSubthemeGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<FeedbackSubthemeGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackSubthemeGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Order", new Func<FeedbackSubthemeGroup, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackSubthemeGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveTvTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveTvTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveTvTariff,  IQPFormService, string>>
		{
			{ "Title", new Func<ArchiveTvTariff, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "IsTariff", new Func<ArchiveTvTariff, IQPFormService, string>((self, ctx) => self.IsTariff != null ? self.IsTariff.Value ? "1" : "0" : null) },
			{ "MonthPrice", new Func<ArchiveTvTariff, IQPFormService, string>((self, ctx) => self.MonthPrice != null ? self.MonthPrice.ToString() : null) },
			{ "Description", new Func<ArchiveTvTariff, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "IdINAC", new Func<ArchiveTvTariff, IQPFormService, string>((self, ctx) => self.IdINAC != null ? self.IdINAC.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean IsTariffExact { get { return this.IsTariff == null ? default(Boolean) : this.IsTariff.Value; } }
		public Double MonthPriceExact { get { return this.MonthPrice == null ? default(Double) : this.MonthPrice.Value; } }
		public Int32 IdINACExact { get { return this.IdINAC == null ? default(Int32) : this.IdINAC.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveTvTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ObsoleteUrlRedirect: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ObsoleteUrlRedirect, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ObsoleteUrlRedirect,  IQPFormService, string>>
		{
			{ "Order", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "OldUrl", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.OldUrl != null ? ctx.ReplacePlaceholders(self.OldUrl) : null) },
			{ "UrlToRedirect", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.UrlToRedirect != null ? ctx.ReplacePlaceholders(self.UrlToRedirect) : null) },
			{ "RedirectType", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.RedirectType != null ? ctx.ReplacePlaceholders(self.RedirectType) : null) },
			{ "Description", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "InOnMainSite", new Func<ObsoleteUrlRedirect, IQPFormService, string>((self, ctx) => self.InOnMainSite != null ? self.InOnMainSite.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		public Boolean InOnMainSiteExact { get { return this.InOnMainSite == null ? default(Boolean) : this.InOnMainSite.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.OldUrl = context.ReplacePlaceholders(this.OldUrl);
			this.UrlToRedirect = context.ReplacePlaceholders(this.UrlToRedirect);
			this.RedirectType = context.ReplacePlaceholders(this.RedirectType);
			this.Description = context.ReplacePlaceholders(this.Description);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ObsoleteUrlRedirect", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ArchiveViewTariff: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ArchiveViewTariff, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ArchiveViewTariff,  IQPFormService, string>>
		{
			{ "IsTv", new Func<ArchiveViewTariff, IQPFormService, string>((self, ctx) => self.IsTv != null ? self.IsTv.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Double IsTvExact { get { return this.IsTv == null ? default(Double) : this.IsTv.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ArchiveViewTariff", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MarketingRegionNoCallback: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MarketingRegionNoCallback, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingRegionNoCallback,  IQPFormService, string>>
		{
			{ "MarketingRegion_ID", new Func<MarketingRegionNoCallback, IQPFormService, string>((self, ctx) => self.MarketingRegion_ID != null ? self.MarketingRegion_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingRegionNoCallback", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackCallbackTime: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackCallbackTime, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackCallbackTime,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackCallbackTime, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "CampaignId", new Func<FeedbackCallbackTime, IQPFormService, string>((self, ctx) => self.CampaignId != null ? self.CampaignId.ToString() : null) },
			{ "Order", new Func<FeedbackCallbackTime, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "TitleEngl", new Func<FeedbackCallbackTime, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackCallbackTime, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 CampaignIdExact { get { return this.CampaignId == null ? default(Int32) : this.CampaignId.Value; } }
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackCallbackTime", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class FeedbackSwindleProblem: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<FeedbackSwindleProblem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FeedbackSwindleProblem,  IQPFormService, string>>
		{
			{ "Title", new Func<FeedbackSwindleProblem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<FeedbackSwindleProblem, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<FeedbackSwindleProblem, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FeedbackSwindleProblem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Contact: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Contact, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Contact,  IQPFormService, string>>
		{
			{ "Title", new Func<Contact, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Description", new Func<Contact, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Email", new Func<Contact, IQPFormService, string>((self, ctx) => self.Email != null ? ctx.ReplacePlaceholders(self.Email) : null) },
			{ "Phone", new Func<Contact, IQPFormService, string>((self, ctx) => self.Phone != null ? ctx.ReplacePlaceholders(self.Phone) : null) },
			{ "Details", new Func<Contact, IQPFormService, string>((self, ctx) => self.Details != null ? ctx.ReplacePlaceholders(self.Details) : null) },
			{ "Order", new Func<Contact, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "ContactsTab_ID", new Func<Contact, IQPFormService, string>((self, ctx) => self.ContactsTab_ID != null ? self.ContactsTab_ID.ToString() : null) },
			{ "TitleEngl", new Func<Contact, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<Contact, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "DescriptionEngl", new Func<Contact, IQPFormService, string>((self, ctx) => self.DescriptionEngl != null ? ctx.ReplacePlaceholders(self.DescriptionEngl) : null) },
			{ "DescriptionTat", new Func<Contact, IQPFormService, string>((self, ctx) => self.DescriptionTat != null ? ctx.ReplacePlaceholders(self.DescriptionTat) : null) },
			{ "DetailsEngl", new Func<Contact, IQPFormService, string>((self, ctx) => self.DetailsEngl != null ? ctx.ReplacePlaceholders(self.DetailsEngl) : null) },
			{ "DetailsTat", new Func<Contact, IQPFormService, string>((self, ctx) => self.DetailsTat != null ? ctx.ReplacePlaceholders(self.DetailsTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Email = context.ReplacePlaceholders(this.Email);
			this.Phone = context.ReplacePlaceholders(this.Phone);
			this.Details = context.ReplacePlaceholders(this.Details);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.DescriptionEngl = context.ReplacePlaceholders(this.DescriptionEngl);
			this.DescriptionTat = context.ReplacePlaceholders(this.DescriptionTat);
			this.DetailsEngl = context.ReplacePlaceholders(this.DetailsEngl);
			this.DetailsTat = context.ReplacePlaceholders(this.DetailsTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Contact", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ContactsTab: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ContactsTab, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ContactsTab,  IQPFormService, string>>
		{
			{ "Title", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Order", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "TitleEngl", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
			{ "Text", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<ContactsTab, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ContactsTab", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ContactsGroup: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ContactsGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ContactsGroup,  IQPFormService, string>>
		{
			{ "Title", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Text", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "TextEngl", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.TextEngl != null ? ctx.ReplacePlaceholders(self.TextEngl) : null) },
			{ "TextTat", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.TextTat != null ? ctx.ReplacePlaceholders(self.TextTat) : null) },
			{ "Order", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "TitleEngl", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ContactsGroup, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.TextEngl = context.ReplacePlaceholders(this.TextEngl);
			this.TextTat = context.ReplacePlaceholders(this.TextTat);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ContactsGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class CampaignIdToRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<CampaignIdToRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<CampaignIdToRegion,  IQPFormService, string>>
		{
			{ "CampaignId", new Func<CampaignIdToRegion, IQPFormService, string>((self, ctx) => self.CampaignId != null ? self.CampaignId.ToString() : null) },
			{ "FeedbackCallbackTime_ID", new Func<CampaignIdToRegion, IQPFormService, string>((self, ctx) => self.FeedbackCallbackTime_ID != null ? self.FeedbackCallbackTime_ID.ToString() : null) },
			{ "Region_ID", new Func<CampaignIdToRegion, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 CampaignIdExact { get { return this.CampaignId == null ? default(Int32) : this.CampaignId.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("CampaignIdToRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SitemapXml: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SitemapXml, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SitemapXml,  IQPFormService, string>>
		{
			{ "Generated", new Func<SitemapXml, IQPFormService, string>((self, ctx) => self.Generated != null ? self.Generated : null) },
			{ "Current", new Func<SitemapXml, IQPFormService, string>((self, ctx) => self.Current != null ? self.Current : null) },
			{ "Region_ID", new Func<SitemapXml, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SitemapXml", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SiteConfig: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SiteConfig, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteConfig,  IQPFormService, string>>
		{
			{ "Alias", new Func<SiteConfig, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Parent_ID", new Func<SiteConfig, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Alias = context.ReplacePlaceholders(this.Alias);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteConfig", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class RobotsTxt: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<RobotsTxt, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<RobotsTxt,  IQPFormService, string>>
		{
			{ "Text", new Func<RobotsTxt, IQPFormService, string>((self, ctx) => self.Text != null ? self.Text : null) },
			{ "MarketingRegion_ID", new Func<RobotsTxt, IQPFormService, string>((self, ctx) => self.MarketingRegion_ID != null ? self.MarketingRegion_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("RobotsTxt", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MetroLine: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MetroLine, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MetroLine,  IQPFormService, string>>
		{
			{ "Line_ID", new Func<MetroLine, IQPFormService, string>((self, ctx) => self.Line_ID != null ? self.Line_ID.ToString() : null) },
			{ "Icon", new Func<MetroLine, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
			{ "ColorName", new Func<MetroLine, IQPFormService, string>((self, ctx) => self.ColorName != null ? ctx.ReplacePlaceholders(self.ColorName) : null) },
		};

		#endregion
		#region Genarated properties
		public string IconUrl { get; set; }
		public string IconUploadPath { get; set; }
		public Int32 Line_IDExact { get { return this.Line_ID == null ? default(Int32) : this.Line_ID.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.ColorName = context.ReplacePlaceholders(this.ColorName);
			this.IconUrl = context.GetUrl(this.Icon, "MetroLine", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "MetroLine", "Icon");
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MetroLine", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class AnnualContractSetting: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<AnnualContractSetting, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<AnnualContractSetting,  IQPFormService, string>>
		{
			{ "FeeLimit", new Func<AnnualContractSetting, IQPFormService, string>((self, ctx) => self.FeeLimit != null ? self.FeeLimit.ToString() : null) },
			{ "FamilyText", new Func<AnnualContractSetting, IQPFormService, string>((self, ctx) => self.FamilyText != null ? ctx.ReplacePlaceholders(self.FamilyText) : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 FeeLimitExact { get { return this.FeeLimit == null ? default(Int32) : this.FeeLimit.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.FamilyText = context.ReplacePlaceholders(this.FamilyText);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("AnnualContractSetting", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MnpCrmSetting: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MnpCrmSetting, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MnpCrmSetting,  IQPFormService, string>>
		{
			{ "QueueName", new Func<MnpCrmSetting, IQPFormService, string>((self, ctx) => self.QueueName != null ? ctx.ReplacePlaceholders(self.QueueName) : null) },
			{ "CaseType0", new Func<MnpCrmSetting, IQPFormService, string>((self, ctx) => self.CaseType0 != null ? ctx.ReplacePlaceholders(self.CaseType0) : null) },
			{ "CaseType1", new Func<MnpCrmSetting, IQPFormService, string>((self, ctx) => self.CaseType1 != null ? ctx.ReplacePlaceholders(self.CaseType1) : null) },
			{ "CaseType2", new Func<MnpCrmSetting, IQPFormService, string>((self, ctx) => self.CaseType2 != null ? ctx.ReplacePlaceholders(self.CaseType2) : null) },
			{ "CaseType3", new Func<MnpCrmSetting, IQPFormService, string>((self, ctx) => self.CaseType3 != null ? ctx.ReplacePlaceholders(self.CaseType3) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.QueueName = context.ReplacePlaceholders(this.QueueName);
			this.CaseType0 = context.ReplacePlaceholders(this.CaseType0);
			this.CaseType1 = context.ReplacePlaceholders(this.CaseType1);
			this.CaseType2 = context.ReplacePlaceholders(this.CaseType2);
			this.CaseType3 = context.ReplacePlaceholders(this.CaseType3);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MnpCrmSetting", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MNPRequestOfficeInRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MNPRequestOfficeInRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MNPRequestOfficeInRegion,  IQPFormService, string>>
		{
			{ "Region_ID", new Func<MNPRequestOfficeInRegion, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MNPRequestOfficeInRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MNPRequesCourierInRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MNPRequesCourierInRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MNPRequesCourierInRegion,  IQPFormService, string>>
		{
			{ "Region_ID", new Func<MNPRequesCourierInRegion, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MNPRequesCourierInRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class MNPRequestPageInRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<MNPRequestPageInRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MNPRequestPageInRegion,  IQPFormService, string>>
		{
			{ "Region_ID", new Func<MNPRequestPageInRegion, IQPFormService, string>((self, ctx) => self.Region_ID != null ? self.Region_ID.ToString() : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MNPRequestPageInRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class SkadToFederalRegion: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<SkadToFederalRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SkadToFederalRegion,  IQPFormService, string>>
		{
			{ "FederalCode", new Func<SkadToFederalRegion, IQPFormService, string>((self, ctx) => self.FederalCode != null ? ctx.ReplacePlaceholders(self.FederalCode) : null) },
			{ "SkadCode", new Func<SkadToFederalRegion, IQPFormService, string>((self, ctx) => self.SkadCode != null ? ctx.ReplacePlaceholders(self.SkadCode) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.FederalCode = context.ReplacePlaceholders(this.FederalCode);
			this.SkadCode = context.ReplacePlaceholders(this.SkadCode);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SkadToFederalRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ServicePrefix: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ServicePrefix, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ServicePrefix,  IQPFormService, string>>
		{
			{ "Title", new Func<ServicePrefix, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleEngl", new Func<ServicePrefix, IQPFormService, string>((self, ctx) => self.TitleEngl != null ? ctx.ReplacePlaceholders(self.TitleEngl) : null) },
			{ "TitleTat", new Func<ServicePrefix, IQPFormService, string>((self, ctx) => self.TitleTat != null ? ctx.ReplacePlaceholders(self.TitleTat) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleEngl = context.ReplacePlaceholders(this.TitleEngl);
			this.TitleTat = context.ReplacePlaceholders(this.TitleTat);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ServicePrefix", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Widget: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Widget, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Widget,  IQPFormService, string>>
		{
			{ "Title", new Func<Widget, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<Widget, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Version", new Func<Widget, IQPFormService, string>((self, ctx) => self.Version != null ? ctx.ReplacePlaceholders(self.Version) : null) },
			{ "WidgetType", new Func<Widget, IQPFormService, string>((self, ctx) => self.WidgetType != null ? self.WidgetType.ToString() : null) },
		};

		#endregion
		#region Genarated properties
		public Int32 WidgetTypeExact { get { return this.WidgetType == null ? default(Int32) : this.WidgetType.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.Version = context.ReplacePlaceholders(this.Version);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Widget", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Classifier: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Classifier, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Classifier,  IQPFormService, string>>
		{
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Classifier", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class IframeWidget: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<IframeWidget, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<IframeWidget,  IQPFormService, string>>
		{
			{ "ItemId_ID", new Func<IframeWidget, IQPFormService, string>((self, ctx) => self.ItemId_ID != null ? self.ItemId_ID.ToString() : null) },
			{ "IFrameSrc", new Func<IframeWidget, IQPFormService, string>((self, ctx) => self.IFrameSrc != null ? ctx.ReplacePlaceholders(self.IFrameSrc) : null) },
			{ "UseContainerAPI", new Func<IframeWidget, IQPFormService, string>((self, ctx) => self.UseContainerAPI != null ? self.UseContainerAPI.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean UseContainerAPIExact { get { return this.UseContainerAPI == null ? default(Boolean) : this.UseContainerAPI.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.IFrameSrc = context.ReplacePlaceholders(this.IFrameSrc);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("IframeWidget", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class HtmlWidget: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<HtmlWidget, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<HtmlWidget,  IQPFormService, string>>
		{
			{ "ItemId_ID", new Func<HtmlWidget, IQPFormService, string>((self, ctx) => self.ItemId_ID != null ? self.ItemId_ID.ToString() : null) },
			{ "Template", new Func<HtmlWidget, IQPFormService, string>((self, ctx) => self.Template != null ? self.Template : null) },
			{ "Script", new Func<HtmlWidget, IQPFormService, string>((self, ctx) => self.Script != null ? self.Script : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("HtmlWidget", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class Library: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<Library, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<Library,  IQPFormService, string>>
		{
			{ "Title", new Func<Library, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Version", new Func<Library, IQPFormService, string>((self, ctx) => self.Version != null ? ctx.ReplacePlaceholders(self.Version) : null) },
			{ "Link", new Func<Library, IQPFormService, string>((self, ctx) => self.Link != null ? ctx.ReplacePlaceholders(self.Link) : null) },
			{ "Description", new Func<Library, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Name", new Func<Library, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "VariableName", new Func<Library, IQPFormService, string>((self, ctx) => self.VariableName != null ? ctx.ReplacePlaceholders(self.VariableName) : null) },
			{ "FullName", new Func<Library, IQPFormService, string>((self, ctx) => self.FullName != null ? ctx.ReplacePlaceholders(self.FullName) : null) },
		};

		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Version = context.ReplacePlaceholders(this.Version);
			this.Link = context.ReplacePlaceholders(this.Link);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.VariableName = context.ReplacePlaceholders(this.VariableName);
			this.FullName = context.ReplacePlaceholders(this.FullName);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("Library", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class ContainerEvent: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<ContainerEvent, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ContainerEvent,  IQPFormService, string>>
		{
			{ "JavasriptConstantName", new Func<ContainerEvent, IQPFormService, string>((self, ctx) => self.JavasriptConstantName != null ? ctx.ReplacePlaceholders(self.JavasriptConstantName) : null) },
			{ "UniqueEventName", new Func<ContainerEvent, IQPFormService, string>((self, ctx) => self.UniqueEventName != null ? ctx.ReplacePlaceholders(self.UniqueEventName) : null) },
			{ "JavasriptConstantValue", new Func<ContainerEvent, IQPFormService, string>((self, ctx) => self.JavasriptConstantValue != null ? ctx.ReplacePlaceholders(self.JavasriptConstantValue) : null) },
			{ "Description", new Func<ContainerEvent, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
			{ "System", new Func<ContainerEvent, IQPFormService, string>((self, ctx) => self.System != null ? self.System.Value ? "1" : "0" : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean SystemExact { get { return this.System == null ? default(Boolean) : this.System.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.JavasriptConstantName = context.ReplacePlaceholders(this.JavasriptConstantName);
			this.UniqueEventName = context.ReplacePlaceholders(this.UniqueEventName);
			this.JavasriptConstantValue = context.ReplacePlaceholders(this.JavasriptConstantValue);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ContainerEvent", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
	public partial class WidgetDataSource: IQPArticle
	{
		#region Static members
		protected static readonly Dictionary<string, Func<WidgetDataSource, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<WidgetDataSource,  IQPFormService, string>>
		{
			{ "Title", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Version", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.Version != null ? ctx.ReplacePlaceholders(self.Version) : null) },
			{ "BaseUrl", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.BaseUrl != null ? ctx.ReplacePlaceholders(self.BaseUrl) : null) },
			{ "UseCORS", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.UseCORS != null ? self.UseCORS.Value ? "1" : "0" : null) },
			{ "Description", new Func<WidgetDataSource, IQPFormService, string>((self, ctx) => self.Description != null ? self.Description : null) },
		};

		#endregion
		#region Genarated properties
		public Boolean UseCORSExact { get { return this.UseCORS == null ? default(Boolean) : this.UseCORS.Value; } }
		#endregion
		#region Methods
		void IQPArticle.OnMaterialized(IQPLibraryService context)
		{
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.Version = context.ReplacePlaceholders(this.Version);
			this.BaseUrl = context.ReplacePlaceholders(this.BaseUrl);
		}

		// для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
		Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
				// todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("WidgetDataSource", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
					string value = _valueExtractors[prop](this, context);
					table.Add(prop, value);
                }
            }

            return table;
        }
		#endregion
	}
}
